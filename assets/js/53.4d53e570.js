(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{469:function(a,e,n){"use strict";n.r(e);var t=n(2),E=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"_1-mysql日历表-前后5年"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql日历表-前后5年"}},[a._v("#")]),a._v(" 1 MySQL日历表 前后5年")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-- 生成日历表\nCREATE TABLE calendar (\n    date_column DATE PRIMARY KEY,\n    year INT,\n    month INT,\n    day INT,\n    week INT\n);\n-- 填充日历表的数据\nSET @start_date = CURDATE() - INTERVAL 5 YEAR;\nSET @end_date = CURDATE() + INTERVAL 5 YEAR;\n\nINSERT INTO calendar (date_column, year, month, day, week)\nSELECT \n    d,\n    YEAR(d),\n    MONTH(d),\n    DAY(d),\n    WEEKDAY(d)\nFROM (\n    SELECT DATE_ADD(@start_date, INTERVAL a.a + (10 * b.a) + (100 * c.a) + (1000 * d.a) DAY) AS d\n    FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS a\n    CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS b\n    CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS c\n    CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) AS d\n) AS dates\nWHERE d BETWEEN @start_date AND @end_date;\n")])])]),e("h2",{attrs:{id:"_2-查询-coalesce-为空时给0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询-coalesce-为空时给0"}},[a._v("#")]),a._v(" 2 查询 COALESCE 为空时给0")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT \n    cal.date_column,\n    SUM(COALESCE(emc.carbon_total, 0)) AS total_carbon\nFROM \n    calendar AS cal\nLEFT JOIN \n    lb_enterprise_employee_carbon AS emc \nON \n    DATE(cal.date_column) = DATE(emc.create_date)\nWHERE \n    emc.tenant_code = 12345 \n    AND cal.date_column >= '2023-01-24' \n    AND cal.date_column <= '2023-12-31'\nGROUP BY \n    cal.date_column\nORDER BY \n    cal.date_column;\n")])])]),e("h3",{attrs:{id:"查询的结果始终不连续"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询的结果始终不连续"}},[a._v("#")]),a._v(" 查询的结果始终不连续")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://s2.loli.net/2024/01/24/vuwUxIhEjCdyo95.png",alt:""}})]),a._v(" "),e("blockquote",[e("p",[a._v("改了改这样可以。要把查询条件放on，不然全被where过滤了")]),a._v(" "),e("p",[a._v("on:在join的时候就只取emc的tenant_code = 12345")]),a._v(" "),e("p",[a._v("where：join之后的结果进行tenant_code = 12345 ，所以会被过滤掉")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("SELECT \n    cal.create_date,\n    COALESCE(SUM(emc.carbon_total), 0) AS total_carbon\nFROM \n    calendar AS cal\nLEFT JOIN \n    lb_enterprise_employee_carbon AS emc \nON \n    DATE(cal.create_date) = DATE(emc.create_date)\n    AND emc.tenant_code = 12345 \nWHERE \n    cal.create_date >= '2024-01-01' \n    AND cal.create_date <= '2024-01-31'\nGROUP BY \n    cal.create_date\nORDER BY \n    cal.create_date;\n")])])]),e("p",[e("img",{attrs:{src:"https://s2.loli.net/2024/01/24/VkorDuFvKZ9sIA5.png",alt:""}})]),a._v(" "),e("h2",{attrs:{id:"_3-scheduled-定时任务cron-表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-scheduled-定时任务cron-表达式"}},[a._v("#")]),a._v(" 3 Scheduled 定时任务cron 表达式")]),a._v(" "),e("h3",{attrs:{id:"_1-cron表达式格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-cron表达式格式"}},[a._v("#")]),a._v(" 1.cron表达式格式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}\n")])])]),e("h3",{attrs:{id:"_2-cron表达式各占位符解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-cron表达式各占位符解释"}},[a._v("#")]),a._v(" 2.cron表达式各占位符解释：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{秒数}{分钟} ==> 允许值范围: 0~59 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\n“*” 代表每隔1秒钟触发；\n“,” 代表在指定的秒数触发，比如”0,15,45”代表0秒、15秒和45秒时触发任务\n“-“代表在指定的范围内触发，比如”25-45”代表从25秒开始触发到45秒结束触发，每隔1秒触发1次\n“/”代表触发步进(step)，”/”前面的值代表初始值(““等同”0”)，后面的值代表偏移量，比如”0/20”或者”/20”代表从0秒钟开始，每隔20秒钟触发1次，即0秒触发1次，20秒触发1次，40秒触发1次；”5/20”代表5秒触发1次，25秒触发1次，45秒触发1次；”10-45/20”代表在[10,45]内步进20秒命中的时间点触发，即10秒触发1次，30秒触发1次\n{小时} ==> 允许值范围: 0~23 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常,占位符和秒数一样\n{日期} ==> 允许值范围: 1~31 ,不允许为空值，若值不合法，调度器将抛出SchedulerException异常\n{星期} ==> 允许值范围: 1~7 (SUN-SAT),1代表星期天(一星期的第一天)，以此类推，7代表星期六(一星期的最后一天)，不允许为空值，若值不合法，调度器将抛出SchedulerException异常\n{年份} ==> 允许值范围: 1970~2099 ,允许为空，若值不合法，调度器将抛出SchedulerException异常\n\n注意：除了{日期}和{星期}可以使用”?”来实现互斥，表达无意义的信息之外，其他占位符都要具有具体的时间含义，且依赖关系为：年->月->日期(星期)->小时->分钟->秒数\n")])])]),e("h3",{attrs:{id:"_3-cron表达式的强大魅力在于灵活的横向和纵向组合以及简单的语法-用cron表达式几乎可以写出任何你想要触发的时间点与周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-cron表达式的强大魅力在于灵活的横向和纵向组合以及简单的语法-用cron表达式几乎可以写出任何你想要触发的时间点与周期"}},[a._v("#")]),a._v(" 3.cron表达式的强大魅力在于灵活的横向和纵向组合以及简单的语法，用cron表达式几乎可以写出任何你想要触发的时间点与周期")]),a._v(" "),e("p",[a._v("经典案例：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("“30 * * * * ?” 每半分钟触发任务\n“30 10 * * * ?” 每小时的10分30秒触发任务\n“30 10 1 * * ?” 每天1点10分30秒触发任务\n“30 10 1 20 * ?” 每月20号1点10分30秒触发任务\n“30 10 1 20 10 ? *” 每年10月20号1点10分30秒触发任务\n“30 10 1 20 10 ? 2011” 2011年10月20号1点10分30秒触发任务\n“30 10 1 ? 10 * 2011” 2011年10月每天1点10分30秒触发任务\n“30 10 1 ? 10 SUN 2011” 2011年10月每周日1点10分30秒触发任务\n“15,30,45 * * * * ?” 每15秒，30秒，45秒时触发任务\n“15-45 * * * * ?” 15到45秒内，每秒都触发任务\n“15/5 * * * * ?” 每分钟的每15秒开始触发，每隔5秒触发一次\n“15-30/5 * * * * ?” 每分钟的15秒到30秒之间开始触发，每隔5秒触发一次\n“0 0/3 * * * ?” 每小时的第0分0秒开始，每三分钟触发一次\n“0 15 10 ? * MON-FRI” 星期一到星期五的10点15分0秒触发任务\n“0 15 10 L * ?” 每个月最后一天的10点15分0秒触发任务\n“0 15 10 LW * ?” 每个月最后一个工作日的10点15分0秒触发任务\n“0 15 10 ? * 5L” 每个月最后一个星期四的10点15分0秒触发任务\n“0 15 10 ? * 5#3” 每个月第三周的星期四的10点15分0秒触发任务\n")])])])])}),[],!1,null,null,null);e.default=E.exports}}]);