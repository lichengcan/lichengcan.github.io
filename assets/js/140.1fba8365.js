(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{561:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"一、快速开始"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、快速开始"}},[e._v("#")]),e._v(" 一、快速开始")]),e._v(" "),n("p",[e._v("本文基于 springboot、maven、jdk1.8、mysql 开发，所以开始前我们需要准备好这套环境。我的环境使用了 nacos 作为注册中心，不了解或需要搭建的参考：")]),e._v(" "),n("blockquote",[n("p",[e._v("https://juejin.cn/post/7053977860612030477)")])]),e._v(" "),n("p",[e._v("新建如下数据库：")]),e._v(" "),n("p",[e._v("建议大家选择 utf8mb4 这种字符集，做过微信的同学应该会知道，微信用户名称的表情，是需要这种字符集才能存储的。")]),e._v(" "),n("p",[e._v("我就默认其他环境已经准备好了，咱们直接从 mybatis-plus 开始。")]),e._v(" "),n("h3",{attrs:{id:"_1-1-依赖准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-依赖准备"}},[e._v("#")]),e._v(" 1.1 依赖准备")]),e._v(" "),n("p",[e._v("想要什么依赖版本的去 maven 仓库查看：")]),e._v(" "),n("blockquote",[n("p",[e._v("https://mvnrepository.com/")])]),e._v(" "),n("p",[e._v("引入 mybatis-plus 依赖：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.5.0</version>\n</dependency>\n")])])]),n("p",[e._v("引入 mysql 依赖：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.27</version>\n</dependency>\n")])])]),n("p",[e._v("目前，多数项目会有多数据源的要求，或者是主从部署的要求，所以我们还需要引入 mybatis-plus 关于多数据源的依赖：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!-- mybatis-plus 多数据源 --\x3e\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>dynamic-datasource-spring-boot-starter</artifactId>\n    <version>3.5.0</version>\n</dependency>\n")])])]),n("h3",{attrs:{id:"_1-2-配置准备"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-配置准备"}},[e._v("#")]),e._v(" 1.2 配置准备")]),e._v(" "),n("p",[e._v("springboot 启动类。配置@MapperScan 注解，用于扫描 Mapper 文件位置:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@EnableDiscoveryClient\n@MapperScan(\\"com.wjbgn.user.mapper\\")\n@SpringBootApplication\npublic class RobNecessitiesUserApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RobNecessitiesUserApplication.class, args);\n    }\n\n}\n')])])]),n("p",[e._v("数据源配置，此处配置一主一从的环境，当前我只有一台，所以此处配置一样的：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    dynamic:\n      primary: master #设置默认的数据源或者数据源组,默认值即为master\n      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源\n      datasource:\n        master:\n          url: jdbc:mysql://127.0.0.1:3306/rob_necessities?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone =Asia/Shanghai\n          username: root\n          password: 123456\n        slave_1:\n          url: jdbc:mysql://127.0.0.1:3306/rob_necessities?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone =Asia/Shanghai\n          username: root\n          password: 123456\n")])])]),n("p",[e._v("补充 ：这里面因为默认使用的是HikariCP数据源,目前也推荐使用这个，相比于druid有更高的性能，但是不能忽略下面的配置，否则服务会不断抛出异常，原因是数据库的连接时常和连接池的配置没有做好。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    dynamic:\n      hikari:\n        max-lifetime: 1800000\n        connection-timeout: 5000\n        idle-timeout: 3600000\n        max-pool-size: 12\n        min-idle: 4\n        connection-test-query: /**ping*/\n")])])]),n("h3",{attrs:{id:"_1-3-启动服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-启动服务"}},[e._v("#")]),e._v(" 1.3 启动服务")]),e._v(" "),n("p",[e._v("下面直接启动服务：")]),e._v(" "),n("p",[e._v("得到如上结果表示启动成功了。")]),e._v(" "),n("blockquote",[n("p",[e._v("基于 Spring Boot + MyBatis Plus + Vue & Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能")]),e._v(" "),n("ul",[n("li",[e._v("项目地址：https://gitee.com/zhijiantianya/ruoyi-vue-pro")]),e._v(" "),n("li",[e._v("视频教程：https://doc.iocoder.cn/video/")])])]),e._v(" "),n("h2",{attrs:{id:"二、使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、使用"}},[e._v("#")]),e._v(" 二、使用")]),e._v(" "),n("p",[e._v("前面我们成功的集成进来了 mybatis-plus，配合 springboot 使用不要太方便。下面我们看看如何使用它来操作我们的数据库。介绍一下常规的用法。")]),e._v(" "),n("h3",{attrs:{id:"_2-1-实体类注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-实体类注解"}},[e._v("#")]),e._v(" 2.1 实体类注解")]),e._v(" "),n("p",[e._v("mybatis-plus 为使用者封装了很多的注解，方便我们使用，我们首先看下实体类中有哪些注解。有如下的实体类：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@TableName(value = \\"user\\")\npublic class UserDO {\n\n    /**\n     * 主键\n     */\n    @TableId(value = \\"id\\", type = IdType.AUTO)\n    private Long id;\n\n    /**\n     * 昵称\n     */\n    @TableField(\\"nickname\\")\n    private String nickname;\n\n    /**\n     * 真实姓名\n     */\n    private String realName;\n}\n')])])]),n("ul",[n("li",[n("p",[e._v("@TableName 表名注解，用于标识实体类对应的表。")]),e._v(" "),n("p",[e._v("其说明如下，关于这些书写，常规情况基本很少用到，不做多余解释了：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE})\npublic @interface TableName {\n\n    /**\n     * 实体对应的表名\n     */\n    String value() default \\"\\";\n\n    /**\n     * schema\n     *\n     * @since 3.1.1\n     */\n    String schema() default \\"\\";\n\n    /**\n     * 是否保持使用全局的 tablePrefix 的值\n     * <p> 只生效于 既设置了全局的 tablePrefix 也设置了上面 {@link #value()} 的值 </p>\n     * <li> 如果是 false , 全局的 tablePrefix 不生效 </li>\n     *\n     * @since 3.1.1\n     */\n    boolean keepGlobalPrefix() default false;\n\n    /**\n     * 实体映射结果集,\n     * 只生效与 mp 自动注入的 method\n     */\n    String resultMap() default \\"\\";\n\n    /**\n     * 是否自动构建 resultMap 并使用,\n     * 只生效与 mp 自动注入的 method,\n     * 如果设置 resultMap 则不会进行 resultMap 的自动构建并注入,\n     * 只适合个别字段 设置了 typeHandler 或 jdbcType 的情况\n     *\n     * @since 3.1.2\n     */\n    boolean autoResultMap() default false;\n\n    /**\n     * 需要排除的属性名\n     *\n     * @since 3.3.1\n     */\n    String[] excludeProperty() default {};\n}\n')])])]),n("ul",[n("li",[n("p",[e._v("@TableId 主键注解")]),e._v(" "),n("p",[e._v("看看其源码：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE})\npublic @interface TableId {\n\n    /**\n     * 字段值（驼峰命名方式，该值可无）\n     */\n    String value() default \\"\\";\n\n    /**\n     * 主键ID\n     * {@link IdType}\n     */\n    IdType type() default IdType.NONE;\n}\n')])])]),n("p",[e._v("其中 IdType 很重要：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("名称")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("AUTO")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("数据库自增 ID")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("NONE")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("INPUT")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("用户自己设置的 ID")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("ASSIGN_ID")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("当用户传入为空时，自动分配类型为 Number 或 String 的主键（雪花算法）")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("ASSIGN_UUID")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("当用户传入为空时，自动分配类型为 String 的主键")])])])]),e._v(" "),n("ul",[n("li",[e._v("@TableFiled 表字段标识")])]),e._v(" "),n("p",[e._v("下面看看其主要常用属性：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("名称")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("value")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("数据库字段名")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("condition")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("字段  where 实体查询比较条件，通过SqlCondition设置 如果未设置条件，则按照正常相等来查询 若设置则按照以下规则： 等于：EQUAL = \"%s=#{%s}\"; 不等于：NOT_EQUAL = \"%s<>#{%s}\"; 左右模糊：LIKE = \"%s LIKE CONCAT('%%',#{%s},'%%')\"; oracle 左右模糊 ORACLE_LIKE = \"%s LIKE CONCAT(CONCAT('%%',#{%s}),'%%')\"; 左模糊：LIKE_LEFT = \"%s LIKE CONCAT('%%',#{%s})\"; 右模糊：LIKE_RIGHT = \"%s LIKE CONCAT(#{%s},'%%')\";")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("fill")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("自动填充策略，通过FieldFill设置 不处理：FieldFill.DEFAULT 插入时填充字段：FieldFill.INSERT 更新时填充字段：FieldFill.UPDATE 插入或新增时填充字段：FieldFill.INSERT_UPDATE")])])])]),e._v(" "),n("p",[e._v("关于其他的属性，我不太推荐使用，用得越多，越容易蒙圈。可以通过 wapper 查询去设置。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-crud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-crud"}},[e._v("#")]),e._v(" 2.2 CRUD")]),e._v(" "),n("p",[e._v("mybatis-plus 封装好了一条接口供我们直接调用。关于内部的具体方法，在使用时候自己体会吧，此处不列举了。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-1-service-层-crud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-service-层-crud"}},[e._v("#")]),e._v(" 2.2.1 Service 层 CRUD")]),e._v(" "),n("p",[e._v("我们使用的时候，需要在自己定义的 service 接口当中继承IService接口：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import com.baomidou.mybatisplus.extension.service.IService;\nimport com.wjbgn.user.entity.UserDO;\n\n/**\n * @description： 用户服务接口\n * @author：weirx\n * @date：2022/1/17 15:02\n * @version：3.0\n */\npublic interface IUserService extends IService<UserDO> {\n}\n")])])]),n("p",[e._v("同时要在我们的接口实现 impl 当中继承ServiceImpl，实现自己的接口：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.wjbgn.user.entity.UserDO;\nimport com.wjbgn.user.mapper.UserMapper;\nimport com.wjbgn.user.service.IUserService;\n\n/**\n * @description： 用户接口实现\n * @author：weirx\n * @date：2022/1/17 15:03\n * @version：3.0\n */\npublic class UserServiceImpl extends ServiceImpl<UserMapper, UserDO> implements IUserService {\n\n}\n")])])]),n("p",[e._v("所以我们的")]),e._v(" "),n("h4",{attrs:{id:"_2-2-2-mapper-层-crud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-mapper-层-crud"}},[e._v("#")]),e._v(" 2.2.2 Mapper 层 CRUD")]),e._v(" "),n("p",[e._v("mybatis-plus 将常用的 CRUD 接口封装成了BaseMapper接口,我们只需要在自己的 Mapper 中继承它就可以了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/**\n * @description： 用户mapper\n * @author：weirx\n * @date：2022/1/17 14:55\n * @version：3.0\n */\n@Mapper\npublic interface UserMapper extends BaseMapper<UserDO> {\n}\n")])])]),n("h3",{attrs:{id:"_2-3-分页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-分页"}},[e._v("#")]),e._v(" 2.3 分页")]),e._v(" "),n("p",[e._v("使用分页话需要增加分页插件的配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.baomidou.mybatisplus.annotation.DbType;\nimport com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@MapperScan(\\"com.wjbgn.*.mapper*\\")\npublic class MybatisPlusConfig {\n\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n\n}\n')])])]),n("p",[e._v("如上配置后，我们直接使用分页方法就行。")]),e._v(" "),n("h3",{attrs:{id:"_2-4-逻辑删除配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-逻辑删除配置"}},[e._v("#")]),e._v(" 2.4 逻辑删除配置")]),e._v(" "),n("p",[e._v("很多情况下我们的系统都需要逻辑删除，方便恢复查找误删除的数据。")]),e._v(" "),n("p",[e._v("通过 mybatis-plus 可以通过全局配置的方式，而不需要再去手动处理。针对更新和查询操作有效，新增不做限制。")]),e._v(" "),n("p",[e._v("通常以我的习惯逻辑删除字段通常定义为is_delete,在实体类当中就是isDelete。那么在配置文件中就可以有如下的配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: isDelete # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n")])])]),n("p",[e._v("或者通过注解@TableLogic")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@TableLogic\nprivate Integer isDelete;\n")])])]),n("h3",{attrs:{id:"_2-5-通用枚举配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-通用枚举配置"}},[e._v("#")]),e._v(" 2.5 通用枚举配置")]),e._v(" "),n("p",[e._v("相信后端的同学都经历过一个情况，比如性别这个字段，分别值和名称对应1男、2女,这个字段在数据库时是数值类型，而前端展示则是展示字符串的名称。有几种常见实现方案呢？")]),e._v(" "),n("ul",[n("li",[e._v("数据库查询 sql 通过 case 判断，返回名称，以前 oracle 经常这么做")]),e._v(" "),n("li",[e._v("数据库返回的值，重新遍历赋值进去，这时候还需要判断这个值到底是男是女。")]),e._v(" "),n("li",[e._v("前端写死，返回 1 就是男，返回 2 就是女。")])]),e._v(" "),n("p",[e._v("相信无论哪种方法都有其缺点，所以我们可以使用 mybatis-plus 提供的方式。我们在返回给前端时：")]),e._v(" "),n("ul",[n("li",[e._v("只需要在遍历时 get 这个枚举，直接赋值其名称，不需要再次判断。")]),e._v(" "),n("li",[e._v("直接返回给前端，让前端去去枚举的 name")])]),e._v(" "),n("p",[e._v("这样大家都不需要写死这个值。")]),e._v(" "),n("p",[e._v("下面看看如何实现这个功能：")]),e._v(" "),n("ul",[n("li",[e._v("兴义枚举，实现 IEnum 接口：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.baomidou.mybatisplus.annotation.IEnum;\nimport com.fasterxml.jackson.annotation.JsonFormat;\n\n/**\n * @description： 性别枚举\n * @author：weirx\n * @date：2022/1/17 16:26\n * @version：3.0\n */\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\npublic enum SexEnum implements IEnum<Integer> {\n    MAN(1, \\"男\\"),\n    WOMAN(2, \\"女\\");\n    private Integer code;\n    private String name;\n\n    SexEnum(Integer code, String name) {\n        this.code = code;\n        this.name = name;\n    }\n\n    @Override\n    public Integer getValue() {\n        return code;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n}\n')])])]),n("p",[e._v("@JsonFormat 注解为了解决枚举类返回前端只展示构造器名称的问题。")]),e._v(" "),n("ul",[n("li",[e._v("实体类性别字段")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@TableName(value = \\"user\\")\npublic class UserDO {\n\n    /**\n     * 主键\n     */\n    @TableId(value = \\"id\\", type = IdType.AUTO)\n    private Long id;\n\n    /**\n     * 昵称\n     */\n    @TableField(value = \\"nickname\\",condition = SqlCondition.EQUAL)\n    private String nickname;\n\n    /**\n     * 性别\n     */\n    @TableField(value = \\"sex\\")\n    private SexEnum sex;\n\n    /**\n     * 版本\n     */\n    @TableField(value = \\"version\\",update = \\"%s+1\\")\n    private Integer version;\n\n    /**\n     * 时间字段，自动添加\n     */\n    @TableField(value = \\"create_time\\",fill = FieldFill.INSERT)\n    private LocalDateTime createTime;\n}\n')])])]),n("ul",[n("li",[e._v("配置文件扫描枚举")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mybatis-plus:\n  # 支持统配符 * 或者 ; 分割\n  typeEnumsPackage: com.wjbgn.*.enums\n")])])]),n("ul",[n("li",[e._v("定义配置文件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Bean\npublic MybatisPlusPropertiesCustomizer mybatisPlusPropertiesCustomizer() {\n    return properties -> {\n        GlobalConfig globalConfig = properties.getGlobalConfig();\n        globalConfig.setBanner(false);\n        MybatisConfiguration configuration = new MybatisConfiguration();\n        configuration.setDefaultEnumTypeHandler(MybatisEnumTypeHandler.class);\n        properties.setConfiguration(configuration);\n    };\n}\n")])])]),n("ul",[n("li",[n("p",[e._v("序列化枚举值为数据库值")]),e._v(" "),n("p",[e._v("以下我是使用的 fastjson：")])]),e._v(" "),n("li"),e._v(" "),n("li",[n("ul",[n("li",[e._v("全局（添加在前面的配置文件中）：")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" @Bean\n public MybatisPlusPropertiesCustomizer mybatisPlusPropertiesCustomizer() {\n     // 序列化枚举值为数据库存储值\n     FastJsonConfig config = new FastJsonConfig();\n     config.setSerializerFeatures(SerializerFeature.WriteEnumUsingToString);\n\n     return properties -> {\n         GlobalConfig globalConfig = properties.getGlobalConfig();\n         globalConfig.setBanner(false);\n         MybatisConfiguration configuration = new MybatisConfiguration();\n         configuration.setDefaultEnumTypeHandler(MybatisEnumTypeHandler.class);\n         properties.setConfiguration(configuration);\n     };\n }\n")])])]),n("ul",[n("li",[e._v("局部")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" @JSONField(serialzeFeatures= SerializerFeature.WriteEnumUsingToString)\n private SexEnum sex;\n")])])]),n("h3",{attrs:{id:"_2-6-自动填充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-自动填充"}},[e._v("#")]),e._v(" 2.6 自动填充")]),e._v(" "),n("p",[e._v("还记得前面提到的实体类当中的注解@TableFeild吗？当中有个属性叫做 fill，通过FieldFill设置属性，这个就是做自动填充用的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public enum FieldFill {\n    /**\n     * 默认不处理\n     */\n    DEFAULT,\n    /**\n     * 插入填充字段\n     */\n    INSERT,\n    /**\n     * 更新填充字段\n     */\n    UPDATE,\n    /**\n     * 插入和更新填充字段\n     */\n    INSERT_UPDATE\n}\n")])])]),n("p",[e._v("但是这个直接是不能使用的，需要通过实现 mybatis-plus 提供的接口，增加如下配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\n\nimport java.time.LocalDateTime;\n\n/**\n * description: 启动自动填充功能\n\n * @return:\n * @author: weirx\n * @time: 2022/1/17 17:00\n */\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        // 起始版本 3.3.0(推荐使用)\n        this.strictInsertFill(metaObject, \\"createTime\\", LocalDateTime.class, LocalDateTime.now());\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        // 起始版本 3.3.0(推荐)\n        this.strictUpdateFill(metaObject, \\"updateTime\\", LocalDateTime.class, LocalDateTime.now());\n    }\n}\n')])])]),n("p",[e._v("字段如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * 时间字段，自动添加\n */\n@TableField(value = \\"create_time\\",fill = FieldFill.INSERT)\nprivate LocalDateTime createTime;\n')])])]),n("h3",{attrs:{id:"_2-7-多数据源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-多数据源"}},[e._v("#")]),e._v(" 2.7 多数据源")]),e._v(" "),n("p",[e._v("前面提到过，配置文件当中配置了主从的方式，其实 mybatis-plus 还支持更多的方式：")]),e._v(" "),n("ul",[n("li",[e._v("多主多从")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    dynamic:\n      primary: master #设置默认的数据源或者数据源组,默认值即为master\n      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源\n      datasource:\n        master_1:\n        master_2:\n        slave_1:\n        slave_2:\n        slave_3:\n")])])]),n("ul",[n("li",[e._v("多种数据库")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    dynamic:\n      primary: mysql #设置默认的数据源或者数据源组,默认值即为master\n      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源\n      datasource:\n        mysql:\n        oracle:\n        postgresql:\n        h2:\n        sqlserver:\n")])])]),n("ul",[n("li",[e._v("混合配置")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    dynamic:\n      primary: master #设置默认的数据源或者数据源组,默认值即为master\n      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源\n      datasource:\n        master_1:\n        slave_1:\n        slave_2:\n        oracle_1:\n        oracle_2:\n")])])]),n("p",[e._v("上面的三种方式，除了混合配置，我觉得都有肯能出现的吧。")]),e._v(" "),n("ul",[n("li",[e._v("@DS 注解")])]),e._v(" "),n("p",[e._v("可以注解在方法上或类上，同时存在就近原则 【方法上注解】 优先于 【类上注解】 ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@DS(\\"slave_1\\")\npublic class UserServiceImpl extends ServiceImpl<UserMapper, UserDO> implements IUserService {\n\n\n    @DS(\\"salve_1\\")\n    @Override\n    public List<UserDO> getList() {\n        return this.getList();\n    }\n\n    @DS(\\"master\\")\n    @Override\n    public int saveUser(UserDO userDO) {\n        boolean save = this.save(userDO);\n        if (save){\n            return 1;\n        }else{\n            return 0;\n        }\n    }\n}\n')])])]),n("blockquote",[n("p",[e._v("基于 Spring Cloud Alibaba + Gateway + Nacos + RocketMQ + Vue & Element 实现的后台管理系统 + 用户小程序，支持 RBAC 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能")]),e._v(" "),n("ul",[n("li",[e._v("项目地址：https://gitee.com/zhijiantianya/yudao-cloud")]),e._v(" "),n("li",[e._v("视频教程：https://doc.iocoder.cn/video/")])])]),e._v(" "),n("h2",{attrs:{id:"三、测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、测试"}},[e._v("#")]),e._v(" 三、测试")]),e._v(" "),n("p",[e._v("经过上面的配置，下面开始进入测试验证阶段。")]),e._v(" "),n("p",[e._v("建立一张表：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `nickname` varchar(255) NOT NULL COMMENT '昵称',\n  `sex` tinyint(1) NOT NULL COMMENT '性别，1男2女',\n  `create_time` datetime NOT NULL COMMENT '创建时间',\n  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除 1是，0否',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4;\n")])])]),n("p",[e._v("controller：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * @description： 用户controller\n * @author：weirx\n * @date：2022/1/17 17:39\n * @version：3.0\n */\n@RestController\n@RequestMapping(\\"/user\\")\npublic class UserController {\n\n    @Autowired\n    private IUserService userService;\n\n    /**\n     * description: 新增\n\n     * @return: boolean\n     * @author: weirx\n     * @time: 2022/1/17 19:11\n     */\n    @RequestMapping(\\"/save\\")\n    public boolean save() {\n        UserDO userDO = new UserDO();\n        userDO.setNickname(\\"大漂亮\\");\n        userDO.setSex(SexEnum.MAN);\n\n        return userService.save(userDO);\n    }\n\n    /**\n     * description: 修改\n     * @param nickname\n     * @param id\n     * @return: boolean\n     * @author: weirx\n     * @time: 2022/1/17 19:11\n     */\n    @RequestMapping(\\"/update\\")\n    public boolean update(@RequestParam String nickname,@RequestParam Long id) {\n        UserDO userDO = new UserDO();\n        userDO.setNickname(nickname);\n        userDO.setId(id);\n        return userService.updateById(userDO);\n    }\n\n    /**\n     * description: 删除\n     * @param id\n     * @return: boolean\n     * @author: weirx\n     * @time: 2022/1/17 19:11\n     */\n    @RequestMapping(\\"/delete\\")\n    public boolean delete(@RequestParam Long id) {\n        UserDO userDO = new UserDO();\n        userDO.setId(id);\n        return userService.removeById(userDO);\n    }\n\n    /**\n     * description: 列表\n     * @return: java.util.List<com.wjbgn.user.entity.UserDO>\n     * @author: weirx\n     * @time: 2022/1/17 19:11\n     */\n    @RequestMapping(\\"/list\\")\n    public List<UserDO> list() {\n        return userService.list();\n    }\n\n    /**\n     * description: 分页列表\n     * @param current\n     * @param size\n     * @return: com.baomidou.mybatisplus.extension.plugins.pagination.Page\n     * @author: weirx\n     * @time: 2022/1/17 19:11\n     */\n    @RequestMapping(\\"/page\\")\n    public Page page(@RequestParam int current,@RequestParam int size) {\n        return userService.page(new Page<>(current,size), new QueryWrapper(new UserDO()));\n    }\n\n}\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);