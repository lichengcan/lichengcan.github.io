(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{558:function(t,n,e){"use strict";e.r(n);var r=e(2),a=Object(r.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-二分查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-二分查找"}},[t._v("#")]),t._v(" 1 二分查找")]),t._v(" "),n("p",[t._v("二分查找的时间复杂度：log2n")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/image-20231019143317231.png",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"_2-二分查找java实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-二分查找java实现"}},[t._v("#")]),t._v(" 2 二分查找Java实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    public static void main(String[] args) {\n        // 这是我们要搜索的数组（必须是有序的）\n        int[] arr = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};\n        // 我们要查找的目标值\n        int target = 7;\n\n        int result = binarySearch(arr, target);\n\n        if (result == -1) {\n            System.out.println("Element not present");\n        } else {\n            System.out.println("Element found at index: " + result);\n        }\n    }\n\nprivate static int binarySearch(int[] arr, int target) {\n        //定义左右指针\n        int left = 0;\n        int right = arr.length - 1;\n        //循环条件：左指针<=右指针\n        while (left <= right) {\n            //定义一个temp指针 初始值为arr的一半\n            int temp = left + (right - left) / 2;\n            //判断temp元素是否等于target\n            if (arr[temp] == target) {\n                return temp;\n            }\n            //中间值 大于 目标值，目标值 中间值\n            if (arr[temp] > target)\n                //右指针左移\n                right=temp-1;\n            else\n                left=temp+1;\n        }\n        //找不到就 -1\n        return -1;\n    }\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);