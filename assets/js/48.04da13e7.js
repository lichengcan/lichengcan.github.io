(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{468:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-动态排序-desc-asc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-动态排序-desc-asc"}},[e._v("#")]),e._v(" 1 动态排序 desc asc")]),e._v(" "),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" ${} #{}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        <if test=\"req.orders != null and orders.size() > 0\">\n            ORDER BY\n            <foreach collection=\"orders\" item=\"order\" separator=\",\">\n                <choose>\n                    <when test=\"order.column == 'create_time'\">\n                        culture.create_time ${order.asc ? 'ASC' : 'DESC'}\n                    </when>\n                    <otherwise>\n                        ent.${order.column} ${order.asc ? 'ASC' : 'DESC'}\n                    </otherwise>\n                </choose>\n            </foreach>\n        </if>\n")])])]),t("blockquote",[t("p",[t("code",[e._v("${}")]),e._v(" 和 "),t("code",[e._v("#{}")]),e._v(" 都是 MyBatis 中用于动态生成 SQL 语句的占位符，但它们的使用方式和含义不同。")]),e._v(" "),t("p",[t("code",[e._v("${}")]),e._v(" 是文本替换，它会直接将传入的参数值按照字符串的形式替换到 SQL 语句中。在 SQL 解析阶段，"),t("code",[e._v("${}")]),e._v(" 占位符会被真实的参数值所替换。因此，"),t("code",[e._v("${}")]),e._v(" 可以用于动态生成 SQL 语句中的列名、表名、排序等不需要通过预编译处理的部分。但使用 "),t("code",[e._v("${}")]),e._v(" 会存在 SQL 注入的风险，因为用户输入的内容会直接拼接到 SQL 语句中，可能导致 SQL 注入攻击。")]),e._v(" "),t("p",[e._v("而 "),t("code",[e._v("#{}")]),e._v(" 是预编译处理，它会将传入的参数值替换成一个占位符 "),t("code",[e._v("?")]),e._v("，并将该占位符加入到 SQL 语句中。在 SQL 执行阶段，"),t("code",[e._v("#{}")]),e._v(" 占位符会被预编译过的参数值所替换。因此，"),t("code",[e._v("#{}")]),e._v(" 可以用于动态生成 SQL 语句中的条件语句、参数值等需要通过预编译处理的部分。使用 "),t("code",[e._v("#{}")]),e._v(" 可以有效地防止 SQL 注入攻击。")]),e._v(" "),t("p",[e._v("在上面提供的代码中，"),t("code",[e._v("${order.asc ? 'ASC' : 'DESC'}")]),e._v(" 是一个三元表达式，用于动态生成排序语句中的 "),t("code",[e._v("ASC")]),e._v(" 或 "),t("code",[e._v("DESC")]),e._v(" 关键字。由于 "),t("code",[e._v("ASC")]),e._v(" 和 "),t("code",[e._v("DESC")]),e._v(" 不需要预编译处理，因此使用 "),t("code",[e._v("${}")]),e._v(" 占位符是合适的。而对于动态生成 SQL 语句中的条件语句或参数值等，建议使用 "),t("code",[e._v("#{}")]),e._v(" 占位符。")])]),e._v(" "),t("h2",{attrs:{id:"_2-驼峰转下划线-util"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-驼峰转下划线-util"}},[e._v("#")]),e._v(" 2 驼峰转下划线 util")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class CamelCaseToUnderscoreUtils {\n\n    private static final Pattern CAMEL_CASE_PATTERN = Pattern.compile("([a-z])([A-Z])");\n\n    public static String convert(String camelCaseString) {\n        Matcher matcher = CAMEL_CASE_PATTERN.matcher(camelCaseString);\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            matcher.appendReplacement(sb, matcher.group(1) + "_" + matcher.group(2).toLowerCase());\n        }\n        matcher.appendTail(sb);\n        return sb.toString().toLowerCase();\n    }\n}\n')])])]),t("h2",{attrs:{id:"_3-iputil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-iputil"}},[e._v("#")]),e._v(" 3 IPUtil")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class IpUtil {\n\n    /**\n     * 获取当前HTTP请求发起者的IP地址\n     *\n     * @return 请求者的IP地址字符串\n     */\n    public static String getRequesterIpAddress() {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        if (attributes != null) {\n            HttpServletRequest request = attributes.getRequest();\n            return request.getRemoteAddr();\n        } else {\n            throw new IllegalStateException("Cannot obtain the requester IP address outside of a web request context.");\n        }\n    }\n\n}\n')])])]),t("h2",{attrs:{id:"_4-手机号校验-util"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-手机号校验-util"}},[e._v("#")]),e._v(" 4 手机号校验 util")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/**\n * 手机号校验工具类\n */\npublic class PhoneNumberValidator {\n    private static final String PHONE_NUMBER_REGEX = "^1[3-9]\\\\d{9}$";\n    private static final Pattern PHONE_NUMBER_PATTERN = Pattern.compile(PHONE_NUMBER_REGEX);\n\n    public static boolean isValidPhoneNumber(String phoneNumber) {\n        if (phoneNumber == null || phoneNumber.trim().isEmpty()) {\n            return false;\n        }\n        return PHONE_NUMBER_PATTERN.matcher(phoneNumber).matches();\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);