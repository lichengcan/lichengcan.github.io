(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{534:function(e,s,t){"use strict";t.r(s);var n=t(2),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"docker创建redis集群-方法一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker创建redis集群-方法一"}},[e._v("#")]),e._v(" Docker创建Redis集群 方法一")]),e._v(" "),s("h2",{attrs:{id:"创建redis配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建redis配置文件"}},[e._v("#")]),e._v(" 创建Redis配置文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 配置文件存放路径\nBASE_PATH=/opt/redis\n# 创建个数\nREDIS_COUNT=6\n# ip前缀\nREDIS_IP=192.168.104.128\n\nfor port in $(seq 1 $REDIS_COUNT);\ndo\nmkdir -p $BASE_PATH/node-$port/conf\nmkdir -p $BASE_PATH/node-$port/data\ntouch $BASE_PATH/node-$port/conf/redis.conf\ncat <<EOF > $BASE_PATH/node-$port/conf/redis.conf\nport 63$port\n# 生产环境中为了安全性请绑定当前机器的ip\nbind $REDIS_IP\n# 启动集群模式\ncluster-enabled yes\ncluster-config-file nodes.conf\n# redis节点宕机被发现的时间\ncluster-node-timeout 5000\ncluster-announce-ip $REDIS_IP$port\ncluster-announce-port 6379\ncluster-announce-bus-port 16379\nappendonly yes\nEOF\ndone\n")])])]),s("p",[e._v("sudo chmod +x redis-node-config.sh")]),e._v(" "),s("p",[e._v("查看脚本是否成功生成文件")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /opt/redis\nll\n\n")])])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/Snipaste_2023-11-15_18-06-22.jpg",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"创建redis运行脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建redis运行脚本"}},[e._v("#")]),e._v(" 创建redis运行脚本")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#!/bin/bash\n\n# 配置文件存放路径\nBASE_PATH=/opt/redis\n# 创建个数\nREDIS_COUNT=6\n# ip前缀\nREDIS_IP=192.168.104.128\n\n//这里一定要配置docker网段\ndocker network create redis-net\n\nfor port in $(seq 1 $REDIS_COUNT);\ndo\n  docker run -d -p 637$port:6379 -p 1667$port:16379 \\\n  --name redis-$port \\\n  -v $BASE_PATH/node-$port/data:/data \\\n  -v $BASE_PATH/node-$port/conf/redis.conf:/etc/redis/redis.conf \\\n  --net redis-net \\\n  --hostname redis-$port \\\n  redis redis-server /etc/redis/redis.conf\ndone\n")])])]),s("p",[e._v("sudo chmod +x redis-run.sh")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/Snipaste_2023-11-15_18-08-23.jpg",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"开始搭建redis集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始搭建redis集群"}},[e._v("#")]),e._v(" 开始搭建redis集群")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 进入其中一个容器\ndocker exec -it redis-1 /bin/bash\n# 说明：--cluster ：使用cluster的方式搭建集群 --cluster-replicas 1 ：一个主机有一个从机\nredis-cli --cluster create 172.16.0.11:6379 172.16.0.12:6379 172.16.0.13:6379 172.16.0.14:6379 172.16.0.15:6379 172.16.0.16:6379 --cluster-replicas 1\n")])])]),s("h2",{attrs:{id:"测试-redis-集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-redis-集群"}},[e._v("#")]),e._v(" 测试 redis 集群")]),e._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入redis-1容器")]),e._v("\ndocker exec "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("it redis-1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("bin/bash\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -c:以集群方式启动")]),e._v("\nredis-"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cli")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("c\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置一个键值对")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("set")]),e._v(" name berbai01\n")])])]),s("p",[e._v("这里显示是 172.16.0.12 上的 redis 处理了 set 操作。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/4b3962634836410a9418a0d1037f9489%7Etplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.webp",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"查看集群节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看集群节点"}},[e._v("#")]),e._v(" 查看集群节点")]),e._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[e._v("cluster nodes\n")])])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/f9e44a56d0724a078060c6cbf320ab7e%7Etplv-k3u1fbpfcp-jj-mark_3024_0_0_0_q75.webp",alt:""}})]),e._v(" "),s("p",[e._v("到此已经成功搭建了 redis 的 3 主 3 从集群，上图中 master 为主 redis，slave 则是从 redis。")]),e._v(" "),s("h3",{attrs:{id:"搭建过程的一些命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搭建过程的一些命令"}},[e._v("#")]),e._v(" 搭建过程的一些命令")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("清空vim中所有内容\n1,$d\n删除所有容器\ndocker rm -f $(docker ps -aq)\n进入redis容器\ndocker exec -it redis-1 /bin/bash\n启动集群\nredis-cli --cluster create 192.168.104.128:6371 192.168.104.128:6372 192.168.104.128:6373 192.168.104.128:6374 192.168.104.128:6375 192.168.104.128:6376 --cluster-replicas 1\n\ntelnet 192.168.104.128 6371\nbash: telnet: 未找到命令...\n\nsudo yum install telnet -y\n\n")])])]),s("h1",{attrs:{id:"docker创建redis集群-方法二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker创建redis集群-方法二"}},[e._v("#")]),e._v(" Docker创建Redis集群 方法二")]),e._v(" "),s("h2",{attrs:{id:"使用docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用docker-compose"}},[e._v("#")]),e._v(" 使用docker-compose")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: \'3\'\nservices:\n  redis-master:\n    image: redis\n    command: ["redis-server", "--appendonly", "yes"]\n    ports:\n      - "6371:6379"\n    networks:\n      - mynetwork\n\n  redis-slave:\n    image: redis\n    command: ["redis-server", "--slaveof", "redis-master", "6379", "--appendonly", "yes"]\n    ports:\n      - "6380:6379"\n    depends_on:\n      - redis-master\n    networks:\n      - mynetwork\n\n  redis-sentinel:\n    image: redis\n    command: ["redis-sentinel", "/path/to/sentinel.conf", "--sentinel", "monitor", "mymaster", "192.168.104.128", "6371", "1"]\n    volumes:\n      - /path/on/host/sentinel.conf:/path/to/sentinel.conf\n    ports:\n      - "26379:26379"\n    depends_on:\n      - redis-master\n    networks:\n      - mynetwork\n\nnetworks:\n  mynetwork:\n')])])]),s("h2",{attrs:{id:"新增sentinel配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新增sentinel配置文件"}},[e._v("#")]),e._v(" 新增sentinel配置文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('redis-sentinel:\n  image: redis\n  command: ["redis-sentinel", "/usr/local/etc/redis/sentinel.conf", "--sentinel", "monitor", "mymaster", "192.168.104.128", "6371", "1"]\n  ports:\n    - "26379:26379"\n  depends_on:\n    - redis-master\n  networks:\n    - mynetwork\n\n')])])]),s("h2",{attrs:{id:"执行启动命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行启动命令"}},[e._v("#")]),e._v(" 执行启动命令")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker-compose up -d\n")])])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/image-20231116180327619.png",alt:""}})]),e._v(" "),s("p",[e._v("在你的三台服务器上已经启动了Redis主节点、从节点和哨兵节点后，你可以通过以下几个步骤来验证和判断哨兵集群是否搭建成功：")]),e._v(" "),s("ol",[s("li",[s("p",[s("strong",[e._v("查看哨兵节点的日志：")])]),e._v(" "),s("p",[e._v("进入任何一个哨兵节点的容器并查看日志，以确保哨兵节点正确连接到主节点并监视集群状态。使用以下命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bashCopy codedocker exec -it <redis-sentinel-container-id> redis-cli\nINFO sentinel\n")])])]),s("p",[e._v("这将显示哨兵节点的信息，包括监视的主节点、连接状态等。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("查看哨兵节点信息：")])]),e._v(" "),s("p",[e._v("进入任何一个哨兵节点的容器并运行以下命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bashCopy codedocker exec -it <redis-sentinel-container-id> redis-cli\nSENTINEL masters\n")])])]),s("p",[e._v("这将显示监视的主节点的信息，包括主节点的名称、IP地址、端口、运行状态等。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("模拟主节点宕机：")])]),e._v(" "),s("p",[e._v("在主节点容器中模拟宕机，观察哨兵节点是否能够正确地发现宕机并选择一个从节点升级为主节点。使用以下命令：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bashCopy code\ndocker stop <redis-master-container-id>\n")])])]),s("p",[e._v("然后查看其他哨兵节点的日志，观察是否发生了故障转移。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("检查哨兵节点数量：")])]),e._v(" "),s("p",[e._v("如果你有三台服务器，那么至少需要三个哨兵节点。检查每台服务器上是否都有一个运行的哨兵容器。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("查看 Redis 集群信息：")])]),e._v(" "),s("p",[e._v("使用以下命令在任何一个Redis容器上查看集群信息：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("bashCopy codedocker exec -it <redis-container-id> redis-cli\nCLUSTER INFO\n")])])]),s("p",[e._v("这将显示有关Redis集群的信息，包括主从关系、槽分配等。")])])]),e._v(" "),s("p",[e._v("通过执行这些步骤，你可以验证哨兵集群是否成功搭建，并确保故障转移等功能正常运作。如果所有步骤都顺利完成，那么你的Redis哨兵集群应该已经搭建成功。")])])}),[],!1,null,null,null);s.default=a.exports}}]);