(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{564:function(n,e,t){"use strict";t.r(e);var a=t(2),r=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("blockquote",[e("p",[n._v("深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等，也频繁出现在 leetcode，高频面试题中。")])]),n._v(" "),e("p",[e("strong",[n._v("前言")])]),n._v(" "),e("p",[n._v("深度优先遍历(Depth First Search, 简称 DFS) 与广度优先遍历(Breath First Search)是图论中两种非常重要的算法，生产上广泛用于拓扑排序，寻路(走迷宫)，搜索引擎，爬虫等，也频繁出现在 leetcode，高频面试题中。")]),n._v(" "),e("ul",[e("li",[n._v("深度优先遍历，广度优先遍历简介")]),n._v(" "),e("li",[n._v("习题演练")]),n._v(" "),e("li",[n._v("DFS，BFS 在搜索引擎中的应用")])]),n._v(" "),e("p",[e("strong",[n._v("深度优先遍历，广度优先遍历简介")])]),n._v(" "),e("p",[e("strong",[n._v("深度优先遍历")])]),n._v(" "),e("p",[n._v("主要思路是从图中一个未访问的顶点 V 开始，沿着一条路一直走到底，然后从这条路尽头的节点回退到上一个节点，再从另一条路开始走到底...，不断递归重复此过程，直到所有的顶点都遍历完成，它的特点是不撞南墙不回头，先走完一条路，再换一条路继续走。")]),n._v(" "),e("p",[n._v("树是图的一种特例(连通无环的图就是树)，接下来我们来看看树用深度优先遍历该怎么遍历。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs1.png",alt:""}})]),n._v(" "),e("p",[n._v("1、我们从根节点 1 开始遍历，它相邻的节点有 2，3，4，先遍历节点 2，再遍历 2 的子节点 5，然后再遍历 5 的子节点 9。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs22.png",alt:""}})]),n._v(" "),e("p",[n._v("2、上图中一条路已经走到底了(9是叶子节点，再无可遍历的节点)，此时就从 9 回退到上一个节点 5，看下节点 5 是否还有除 9 以外的节点，没有继续回退到 2，2 也没有除 5 以外的节点，回退到 1，1 有除 2 以外的节点 3，所以从节点 3 开始进行深度优先遍历，如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs2.png",alt:""}})]),n._v(" "),e("p",[n._v("3、同理从 10 开始往上回溯到 6, 6 没有除 10 以外的子节点，再往上回溯，发现 3 有除 6 以外的子点 7，所以此时会遍历 7。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs3.png",alt:""}})]),n._v(" "),e("p",[n._v("3、从 7 往上回溯到 3， 1，发现 1 还有节点 4 未遍历，所以此时沿着 4， 8 进行遍历,这样就遍历完成了。")]),n._v(" "),e("p",[n._v("完整的节点的遍历顺序如下(节点上的的蓝色数字代表)：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs4.png",alt:""}})]),n._v(" "),e("p",[n._v("相信大家看到以上的遍历不难发现这就是树的前序遍历,实际上不管是前序遍历，还是中序遍历，亦或是后序遍历，都属于深度优先遍历。")]),n._v(" "),e("p",[n._v("那么深度优先遍历该怎么实现呢，有递归和非递归两种表现形式，接下来我们以二叉树为例来看下如何分别用递归和非递归来实现深度优先遍历。")]),n._v(" "),e("p",[e("strong",[n._v("1、递归实现")])]),n._v(" "),e("p",[n._v("递归实现比较简单，由于是前序遍历，所以我们依次遍历当前节点，左节点，右节点即可，对于左右节点来说，依次遍历它们的左右节点即可，依此不断递归下去，直到叶节点(递归终止条件)，代码如下：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public class Solution { \n    private static class Node { \n        /** \n         * 节点值 \n         */ \n        public int value; \n        /** \n         * 左节点 \n         */ \n        public Node left; \n        /** \n         * 右节点 \n         */ \n        public Node right; \n \n        public Node(int value, Node left, Node right) { \n            this.value = value; \n            this.left = left; \n            this.right = right; \n        } \n    } \n \n    public static void dfs(Node treeNode) { \n        if (treeNode == null) { \n            return; \n        } \n        // 遍历节点 \n        process(treeNode) \n        // 遍历左节点 \n        dfs(treeNode.left); \n        // 遍历右节点 \n        dfs(treeNode.right); \n    } \n} \n")])])]),e("p",[n._v("递归的表达性很好，也很容易理解，不过如果层级过深，很容易导致栈溢出。所以我们重点看下非递归实现。")]),n._v(" "),e("p",[e("strong",[n._v("2、非递归实现")])]),n._v(" "),e("p",[n._v("仔细观察深度优先遍历的特点，对二叉树来说，由于是先序遍历(先遍历当前节点，再遍历左节点，再遍历右节点)，所以我们有如下思路：")]),n._v(" "),e("p",[n._v("对于每个节点来说，先遍历当前节点，然后把右节点压栈，再压左节点(这样弹栈的时候会先拿到左节点遍历，符合深度优先遍历要求)。")]),n._v(" "),e("p",[n._v("弹栈，拿到栈顶的节点，如果节点不为空，重复步骤 1， 如果为空，结束遍历。")]),n._v(" "),e("p",[n._v("我们以以下二叉树为例来看下如何用栈来实现 DFS。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs5.png",alt:""}})]),n._v(" "),e("p",[n._v("整体动图如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs6.png",alt:""}})]),n._v(" "),e("p",[n._v("整体思路还是比较清晰的，使用栈来将要遍历的节点压栈，然后出栈后检查此节点是否还有未遍历的节点，有的话压栈，没有的话不断回溯(出栈)，有了思路，不难写出如下用栈实现的二叉树的深度优先遍历代码：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/** \n * 使用栈来实现 dfs \n * @param root \n */ \npublic static void dfsWithStack(Node root) { \n    if (root == null) { \n        return; \n    } \n \n    Stack<Node> stack = new Stack<>(); \n    // 先把根节点压栈 \n    stack.push(root); \n    while (!stack.isEmpty()) { \n        Node treeNode = stack.pop(); \n        // 遍历节点 \n        process(treeNode) \n \n        // 先压右节点 \n        if (treeNode.right != null) { \n            stack.push(treeNode.right); \n        } \n \n        // 再压左节点 \n        if (treeNode.left != null) { \n            stack.push(treeNode.left); \n        } \n    } \n} \n\n")])])]),e("p",[n._v("可以看到用栈实现深度优先遍历其实代码也不复杂，而且也不用担心递归那样层级过深导致的栈溢出问题。")]),n._v(" "),e("p",[e("strong",[n._v("广度优先遍历")])]),n._v(" "),e("p",[n._v("广度优先遍历，指的是从图的一个未遍历的节点出发，先遍历这个节点的相邻节点，再依次遍历每个相邻节点的相邻节点。")]),n._v(" "),e("p",[n._v("上文所述树的广度优先遍历动图如下，每个节点的值即为它们的遍历顺序。所以广度优先遍历也叫层序遍历，先遍历第一层(节点 1)，再遍历第二层(节点 2，3，4)，第三层(5，6，7，8)，第四层(9，10)。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs7.png",alt:""}})]),n._v(" "),e("p",[n._v("深度优先遍历用的是栈，而广度优先遍历要用队列来实现，我们以下图二叉树为例来看看如何用队列来实现广度优先遍历。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs5.png",alt:""}})]),n._v(" "),e("p",[n._v("动图如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs8.png",alt:""}})]),n._v(" "),e("p",[n._v("相信看了以上动图，不难写出如下代码：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('/** \n * 使用队列实现 bfs \n * @param root \n */ \nprivate static void bfs(Node root) { \n    if (root == null) { \n        return; \n    } \n    Queue<Node> stack = new LinkedList<>(); \n    stack.add(root); \n \n    while (!stack.isEmpty()) { \n        Node node = stack.poll(); \n        System.out.println("value = " + node.value); \n        Node left = node.left; \n        if (left != null) { \n            stack.add(left); \n        } \n        Node right = node.right; \n        if (right != null) { \n            stack.add(right); \n        } \n    } \n} \n')])])]),e("p",[e("strong",[n._v("习题演练")])]),n._v(" "),e("p",[n._v("接下来我们来看看在 leetcode 中出现的一些使用 DFS，BFS 来解题的题目：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("leetcode 104，111: 给定一个二叉树，找出其最大/最小深度。 \n1.\n")])])]),e("p",[n._v("例如：给定二叉树 [3,9,20,null,null,15,7],")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("   3 \n  / \\ \n 9  20 \n   /  \\ \n  15   7 \n1.2.3.4.5.\n")])])]),e("p",[n._v("则它的最小深度 2，最大深度 3。")]),n._v(" "),e("p",[n._v("解题思路：这题比较简单，只不过是深度优先遍历的一种变形，只要递归求出左右子树的最大/最小深度即可，深度怎么求，每递归调用一次函数，深度加一。不难写出如下代码：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/** \n * leetcode 104: 求树的最大深度 \n * @param node \n * @return \n */ \npublic static int getMaxDepth(Node node) { \n    if (node == null) { \n        return 0; \n    } \n    int leftDepth = getMaxDepth(node.left) + 1; \n    int rightDepth = getMaxDepth(node.right) + 1; \n    return Math.max(leftDepth, rightDepth); \n} \n \n/** \n * leetcode 111: 求树的最小深度 \n * @param node \n * @return \n */ \npublic static int getMinDepth(Node node) { \n    if (node == null) { \n        return 0; \n    } \n    int leftDepth = getMinDepth(node.left) + 1; \n    int rightDepth = getMinDepth(node.right) + 1; \n    return Math.min(leftDepth, rightDepth); \n} \n1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.\n")])])]),e("p",[n._v("leetcode 102: 给你一个二叉树，请你返回其按层序遍历得到的节点值。(即逐层地，从左到右访问所有节点)。示例，给定二叉树：[3,9,20,null,null,15,7]。")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("   3 \n  / \\ \n 9  20 \n   /  \\ \n  15   7 \n1.2.3.4.5.\n")])])]),e("p",[n._v("返回其层次遍历结果：")]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("[ \n  [3], \n  [9,20], \n  [15,7] \n] \n1.2.3.4.5.\n")])])]),e("p",[n._v("解题思路：显然这道题是广度优先遍历的变种，只需要在广度优先遍历的过程中，把每一层的节点都添加到同一个数组中即可，问题的关键在于遍历同一层节点前，必须事先算出同一层的节点个数有多少(即队列已有元素个数)，因为 BFS 用的是队列来实现的，遍历过程中会不断把左右子节点入队，这一点切记!动图如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs9.png",alt:""}})]),n._v(" "),e("p",[n._v("根据以上动图思路不难得出代码如下：")]),n._v(" "),e("p",[e("strong",[n._v("Java 代码")])]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/** \n * leetcdoe 102: 二叉树的层序遍历, 使用 bfs \n * @param root \n */ \nprivate static List<List<Integer>> bfsWithBinaryTreeLevelOrderTraversal(Node root) { \n    if (root == null) { \n        // 根节点为空，说明二叉树不存在，直接返回空数组 \n        return Arrays.asList(); \n    } \n \n    // 最终的层序遍历结果 \n    List<List<Integer>> result = new ArrayList<>(); \n \n    Queue<Node> queue = new LinkedList<>(); \n    queue.offer(root); \n \n    while (!queue.isEmpty()) { \n        // 记录每一层 \n        List<Integer> level = new ArrayList<>(); \n        int levelNum = queue.size(); \n        // 遍历当前层的节点 \n        for (int i = 0; i < levelNum; i++) { \n            Node node = queue.poll(); \n            // 队首节点的左右子节点入队,由于 levelNum 是在入队前算的，所以入队的左右节点并不会在当前层被遍历到 \n            if (node.left != null) { \n                queue.add(node.left); \n            } \n            if (node.right != null) { \n                queue.add(node.right); \n            } \n            level.add(node.value); \n        } \n        result.add(level); \n    } \n \n    return result; \n} \n\n")])])]),e("p",[e("strong",[n._v("Python 代码")])]),n._v(" "),e("p",[n._v("复制")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Solution: \n    def levelOrder(self, root): \n        """ \n        :type root: TreeNode \n        :rtype: List[List[int]] \n        """ \n        res = []  #嵌套列表，保存最终结果 \n        if root is None: \n            return res \n         \n        from collections import deque \n        que = deque([root])  #队列，保存待处理的节点 \n        while len(que)!=0: \n            lev = []  #列表，保存该层的节点的值 \n            thislevel = len(que)  #该层节点个数 \n            while thislevel!=0: \n                head = que.popleft()  #弹出队首节点 \n                #队首节点的左右孩子入队 \n                if head.left is not None: \n                    que.append(head.left) \n                if head.right is not None: \n                    que.append(head.right) \n                lev.append(head.val)  #队首节点的值压入本层 \n                thislevel-=1 \n            res.append(lev) \n        return res \n')])])]),e("p",[n._v("这题用 BFS 是显而易见的，但其实也可以用 DFS， 如果在面试中能用 DFS 来处理，会是一个比较大的亮点。")]),n._v(" "),e("p",[n._v("用 DFS 怎么处理呢，我们知道， DFS 可以用递归来实现，其实只要在递归函数上加上一个「层」的变量即可，只要节点属于这一层，则把这个节点放入相当层的数组里，代码如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("private static final List<List<Integer>> TRAVERSAL_LIST  = new ArrayList<>(); \n/** \n * leetcdoe 102: 二叉树的层序遍历, 使用 dfs \n * @param root \n * @return \n */ \nprivate static void dfs(Node root, int level) { \n    if (root == null) { \n        return; \n    } \n \n    if (TRAVERSAL_LIST.size() < level + 1) { \n        TRAVERSAL_LIST.add(new ArrayList<>()); \n    } \n \n    List<Integer> levelList = TRAVERSAL_LIST.get(level); \n    levelList.add(root.value); \n \n    // 遍历左结点 \n    dfs(root.left, level + 1); \n \n    // 遍历右结点 \n    dfs(root.right, level + 1); \n} \n")])])]),e("p",[n._v("力扣练习题："),e("a",{attrs:{href:"https://leetcode.cn/problems/pseudo-palindromic-paths-in-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[n._v("1457. 二叉树中的伪回文路径"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「"),e("strong",[n._v("伪回文")]),n._v("」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。")]),n._v(" "),e("p",[n._v("请你返回从根到叶子节点的所有路径中 "),e("strong",[n._v("伪回文")]),n._v(" 路径的数目。")]),n._v(" "),e("p",[n._v("我的答案：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("package com.example.leetcode.tree;\n\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class TreeNodeTest {\n    class TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n\n        TreeNode() {\n        }\n\n        TreeNode(int val) {\n            this.val = val;\n        }\n\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n            this.right = right;\n        }\n    }\n\n    AtomicInteger count = new AtomicInteger();\n\n    /**\n     * 二叉树中的伪回文路径\n     */\n    public int pseudoPalindromicPaths() {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(1);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        root.right.left = new TreeNode(6);\n        root.right.right = new TreeNode(7);\n        traversePaths(root);\n        return count.get();\n    }\n\n    public void traversePaths(TreeNode root) {\n        //1 根节点为空\n        if(root==null) return;\n        dfs(root, new ArrayList<>());\n    }\n\n//DFS 深度优先遍历根节点到叶子节点\n    private void dfs(TreeNode node, List<Integer> path) {\n        if (node.left == null && node.right == null) {\n            // 遍历到叶子节点，输出路径\n            path.add(node.val);\n            System.out.println(path);\n            if (canFormPalindrome(path)) {\n                count.incrementAndGet();\n            }\n            // 移除当前节点，返回上一节点继续\n            path.remove(path.size() - 1);\n            return;\n        }\n\n        path.add(node.val);\n        //4 左节点遍历\n\n        if (node.left != null) {\n            dfs(node.left, path);\n        }\n        //5 右节点遍历\n        if (node.right != null) {\n            dfs(node.right, path);\n        }\n        // 6 remove\n        path.remove(path.size() - 1);\n    }\n\n    /**\n     * 判断数组是否有回文数的组合，比如：1，1，2可以组合：1，2，1\n     * 统计出现次数为奇数的数量，只能有一个出现次数为奇数的数\n     * @param nums\n     * @return\n     */\n    public boolean canFormPalindrome(List<Integer> nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int oddCount = 0;\n        for (int count : countMap.values()) {\n            if (count % 2 != 0) {\n                oddCount++;\n            }\n        }\n        return oddCount <= 1;\n    }\n\n}\n\n")])])]),e("p",[e("strong",[n._v("示例 1：")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/palindromic_paths_1.png",alt:""}})]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("输入：root = [2,3,1,3,1,null,1]\n输出：2 \n解释：上图为给定的二叉树。总共有 3 条从根到叶子的路径：红色路径 [2,3,3] ，绿色路径 [2,1,1] 和路径 [2,3,1] 。\n     在这些路径中，只有红色和绿色的路径是伪回文路径，因为红色路径 [2,3,3] 存在回文排列 [3,2,3] ，绿色路径 [2,1,1] 存在回文排列 [1,2,1] 。\n")])])]),e("p",[n._v("DFS，BFS 在搜索引擎中的应用我们几乎每天都在 Google, Baidu 这些搜索引擎，那大家知道这些搜索引擎是怎么工作的吗，简单来说有三步：")]),n._v(" "),e("p",[e("strong",[n._v("1、网页抓取")])]),n._v(" "),e("p",[n._v("搜索引擎通过爬虫将网页爬取，获得页面 HTML 代码存入数据库中")]),n._v(" "),e("p",[e("strong",[n._v("2、预处理")])]),n._v(" "),e("p",[n._v("索引程序对抓取来的页面数据进行文字提取，中文分词，(倒排)索引等处理，以备排名程序使用")]),n._v(" "),e("p",[e("strong",[n._v("3、排名")])]),n._v(" "),e("p",[n._v("用户输入关键词后，排名程序调用索引数据库数据，计算相关性，然后按一定格式生成搜索结果页面。")]),n._v(" "),e("p",[n._v("我们重点看下第一步，网页抓取。")]),n._v(" "),e("p",[n._v("这一步的大致操作如下：给爬虫分配一组起始的网页，我们知道网页里其实也包含了很多超链接，爬虫爬取一个网页后，解析提取出这个网页里的所有超链接，再依次爬取出这些超链接，再提取网页超链接。。。，如此不断重复就能不断根据超链接提取网页。如下图示：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/dfs10.png",alt:""}})]),n._v(" "),e("p",[n._v("如上所示，最终构成了一张图，于是问题就转化为了如何遍历这张图，显然可以用深度优先或广度优先的方式来遍历。")]),n._v(" "),e("p",[n._v("如果是广度优先遍历，先依次爬取第一层的起始网页，再依次爬取每个网页里的超链接，如果是深度优先遍历，先爬取起始网页 1，再爬取此网页里的链接...，爬取完之后，再爬取起始网页 2...")]),n._v(" "),e("p",[n._v("实际上爬虫是深度优先与广度优先两种策略一起用的，比如在起始网页里，有些网页比较重要(权重较高)，那就先对这个网页做深度优先遍历，遍历完之后再对其他(权重一样的)起始网页做广度优先遍历。")]),n._v(" "),e("p",[e("strong",[n._v("总结")])]),n._v(" "),e("p",[n._v("DFS 和 BFS 是非常重要的两种算法，大家一定要掌握，本文为了方便讲解，只对树做了 DFS，BFS，大家可以试试如果用图的话该怎么写代码，原理其实也是一样，只不过图和树两者的表示形式不同而已，DFS 一般是解决连通性问题，而 BFS 一般是解决最短路径问题")]),n._v(" "),e("blockquote",[e("p",[n._v("文章参考：https://www.51cto.com/article/614590.html")])])])}),[],!1,null,null,null);e.default=r.exports}}]);