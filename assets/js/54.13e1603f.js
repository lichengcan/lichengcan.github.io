(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{471:function(n,e,a){"use strict";a.r(e);var t=a(2),r=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"_1-找到type相同的进行排名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-找到type相同的进行排名"}},[n._v("#")]),n._v(" 1 找到type相同的进行排名")]),n._v(" "),e("p",[n._v("可用于进行同部门的排名")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 假设你的列表名为EntityDTO，已经填充了数据\nList<EntityDTO> list = ...;\n\n// 首先找到当前用户在列表中的对象\nOptional<EntityDTO> currentUserOpt = list.stream()\n    .filter(dto -> "123456".equals(dto.getPhone()))\n    .findFirst();\n\nif (currentUserOpt.isPresent()) {\n    EntityDTO currentUser = currentUserOpt.get();\n    \n    // 对列表按部门名称和碳减排量降序排序\n    List<EntityDTO> sortedList = list.stream()\n        .sorted(Comparator.comparing(EntityDTO::getDepartmentName)\n                        .thenComparing(EntityDTO::getCarbonTotal, Comparator.reverseOrder()))\n        .collect(Collectors.toList());\n\n    int deptRank = 1;\n    String currentDept = currentUser.getDepartmentName();\n    for (EntityDTO leader : sortedList) {\n        if (currentDept.equals(leader.getDepartmentName()) && !Objects.equals(currentUser, leader)) {\n            deptRank++;\n        } else if (currentDept.equals(leader.getDepartmentName())) {\n            // 当前用户所在位置就是部门排名\n            currentUser.setDeptRank(deptRank);\n            break;\n        }\n    }\n} else {\n    System.out.println("当前用户未在列表中找到");\n}\n')])])]),e("h2",{attrs:{id:"_2-计算百分比-percent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算百分比-percent"}},[n._v("#")]),n._v(" 2 计算百分比 % percent")]),n._v(" "),e("h4",{attrs:{id:"方法一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[n._v("#")]),n._v(" 方法一")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//总数\nfinal double totalCarbon = dataDeptDTOS.stream().mapToDouble(EnterpriseDataDeptDTO::getCarbonTotal).sum();      \n      DecimalFormat df = new DecimalFormat("0.00");\n\n        list.forEach(dto -> {\n            double percent = dto.getCarbonTotal() / totalCarbon * 100;\n            //计算占比\n            dto.setCarbonTotalPercent(Double.parseDouble(df.format(percent)));\n        });\n')])])]),e("h4",{attrs:{id:"方法二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[n._v("#")]),n._v(" 方法二")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("        return dataDeptDTOS.stream()\n                .peek(dto -> dto.setCarbonTotalPercent(ArithmeticUtils.mul(ArithmeticUtils.div(dto.getCarbonTotal(),totalCarbon),100,2)))// 保留两位小数\n                .collect(Collectors.toList());\n")])])]),e("h2",{attrs:{id:"随机生成手机号-generatemobile-phone-tel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机生成手机号-generatemobile-phone-tel"}},[n._v("#")]),n._v(" 随机生成手机号 generateMobile phone tel")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static String generateMobile() {\n    String[] prefixArray = {"130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "147", "150", "151", "152", "153", "155", "156", "157", "158", "159", "186", "187", "188", "189"};\n    String prefix = prefixArray[new Random().nextInt(prefixArray.length)];\n    StringBuilder sb = new StringBuilder(prefix);\n    for (int i = 0; i < 8; i++) {\n        sb.append(new Random().nextInt(10));\n    }\n    return sb.toString();\n}\n')])])]),e("h2",{attrs:{id:"随机生成姓名-generatename"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机生成姓名-generatename"}},[n._v("#")]),n._v(" 随机生成姓名 generateName")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static String generateName() {\n    String[] firstNameArray = {"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁"};\n    String[] lastNameArray = {"丽", "敏", "芳", "静", "秀", "娟", "英", "华", "玲", "珍", "燕", "桂", "霞", "慧", "莉", "美", "琴", "婷", "红", "彩", "晶", "玉", "萍", "淑", "荣", "娜", "涛", "明", "超", "磊", "强", "勇", "军", "杰", "涵", "宇", "凯", "鑫", "晨", "昊", "健", "宁", "泽", "柏", "维", "文", "欣", "扬", "帆", "立", "程", "佳", "俊", "诚", "梓", "轩", "欢", "洋", "紫", "妍", "奕", "梅", "琳", "嘉", "海", "航", "鹏", "翔", "恒", "毅", "星", "博", "云", "琼", "晖", "晓", "峰", "颖", "韬", "瑾", "露", "思", "羽", "蕾", "青", "秉", "宸", "寒", "锦", "卓", "薇", "鸿", "展", "炜", "骏", "曼", "苗", "峻", "皓", "璐", "玫", "铭", "萌", "栋", "政", "琦", "岩", "珂", "哲", "灵", "桐", "璇", "峥", "菲", "淼", "涓", "希", "榕", "文峰", "铭", "旭"};\n    String firstName = firstNameArray[new Random().nextInt(firstNameArray.length)];\n    String lastName = lastNameArray[new Random().nextInt(lastNameArray.length)];\n    return firstName + lastName;\n}\n\n')])])]),e("h2",{attrs:{id:"随机的身份证号码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机的身份证号码"}},[n._v("#")]),n._v(" 随机的身份证号码")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static String generateIdCard() {\n    String[] regionCodeArray = {"110100", "120100", "130100", "140100", "150100", "210100", "220100", "230100", "310100", "320100", "330100", "340100", "350100", "360100", "370100", "410100", "420100", "430100", "440100", "450100", "460100", "500100", "510100", "520100", "530100", "540100", "610100", "620100", "630100", "640100", "650100"};\n    String regionCode = regionCodeArray[new Random().nextInt(regionCodeArray.length)];\n    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(Calendar.YEAR, new Random().nextInt(60) + 1960);\n    calendar.set(Calendar.MONTH, new Random().nextInt(12));\n    calendar.set(Calendar.DAY_OF_MONTH, new Random().nextInt(28) + 1);\n    String birthDate = sdf.format(calendar.getTime());\n    StringBuilder sb = new StringBuilder(regionCode).append(birthDate);\n    for (int i = 0; i < 3; i++) {\n        sb.append(new Random().nextInt(10));\n    }\n    char[] chars = sb.toString().toCharArray();\n    int[] weightArray = {7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2};\n    String[] validateArray = {"1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"};\n    int sum = 0;\n    for (int i = 0; i < weightArray.length; i++) {\n        sum += (chars[i] - \'0\') * weightArray[i];\n    }\n    sb.append(validateArray[sum % 11]);\n    return sb.toString();\n}\n\n')])])]),e("h2",{attrs:{id:"随机的公司名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机的公司名称"}},[n._v("#")]),n._v(" 随机的公司名称")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static String generateCompanyName() {\n    String[] prefixArray = {"北京", "上海", "广州", "深圳", "成都", "杭州", "南京", "武汉", "西安", "重庆", "青岛", "苏州", "天津", "长沙", "厦门", "沈阳", "大连", "福州", "济南", "无锡", "合肥", "南昌", "郑州", "石家庄", "哈尔滨", "长春", "南宁", "昆明", "海口", "兰州", "银川", "乌鲁木齐"};\n    String[] suffixArray = {"电子科技", "信息技术", "通信", "网络", "机械制造", "生物科技", "医药", "能源", "建筑设计", "文化传媒", "金融投资", "旅游酒店", "食品饮料", "物流运输", "环保工程", "化学材料", "地产置业", "公共服务", "体育运动", "教育培训", "家居用品", "汽车销售", "航空航天", "军工装备", "石油石化", "国际贸易", "法律服务", "人力资源", "安防监控", "软件开发", "游戏娱乐", "社交网络"};\n    String prefix = prefixArray[new Random().nextInt(prefixArray.length)];\n    String suffix = suffixArray[new Random().nextInt(suffixArray.length)];\n    return prefix + suffix + "有限公司";\n}\n')])])]),e("h2",{attrs:{id:"随机的部门名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机的部门名称"}},[n._v("#")]),n._v(" 随机的部门名称")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public static String generateDepartmentName() {\n    String[] departmentArray = {"销售部", "研发部", "人力资源部", "财务部", "市场部", "采购部", "生产部", "行政部", "客服部", "品控部", "物流部", "安全环保部", "法务部", "信息技术部", "创新中心", "战略规划部", "投资部", "设计部", "培训部", "客户服务部", "运营管理部", "公关部", "供应链管理部", "质量控制部", "品牌推广部", "售后服务部"};\n    return departmentArray[new Random().nextInt(departmentArray.length)];\n}\n')])])]),e("h2",{attrs:{id:"double工具类-arithmeticutils"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#double工具类-arithmeticutils"}},[n._v("#")]),n._v(" double工具类 ArithmeticUtils")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.dataojo.utils;\n\nimport java.math.BigDecimal;\n\n/**\n * @author Alan.hao\n * @data 2023/05/11 22:25\n * @description 用于高精确处理常用的数学运算\n */\npublic class ArithmeticUtils {\n\n    //默认除法运算精度\n    private static final int DEF_DIV_SCALE = 10;\n\n    /**\n     * 提供精确的加法运算\n     *\n     * @param v1 被加数\n     * @param v2 加数\n     * @return 两个参数的和\n     */\n\n    public static double add(double v1, double v2) {\n        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n        return b1.add(b2).doubleValue();\n    }\n\n    /**\n     * 提供精确的加法运算\n     *\n     * @param v1 被加数\n     * @param v2 加数\n     * @return 两个参数的和\n     */\n    public static BigDecimal add(String v1, String v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.add(b2);\n    }\n\n    /**\n     * 提供精确的加法运算\n     *\n     * @param v1    被加数\n     * @param v2    加数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的和\n     */\n    public static String add(String v1, String v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 提供精确的减法运算\n     *\n     * @param v1 被减数\n     * @param v2 减数\n     * @return 两个参数的差\n     */\n    public static double sub(double v1, double v2) {\n        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n        return b1.subtract(b2).doubleValue();\n    }\n\n    /**\n     * 提供精确的减法运算。\n     *\n     * @param v1 被减数\n     * @param v2 减数\n     * @return 两个参数的差\n     */\n    public static BigDecimal sub(String v1, String v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.subtract(b2);\n    }\n\n    /**\n     * 提供精确的减法运算\n     *\n     * @param v1    被减数\n     * @param v2    减数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的差\n     */\n    public static String sub(String v1, String v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 提供精确的乘法运算\n     *\n     * @param v1 被乘数\n     * @param v2 乘数\n     * @return 两个参数的积\n     */\n    public static double mul(double v1, double v2) {\n        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n        return b1.multiply(b2).doubleValue();\n    }\n\n    /**\n     * 提供精确的乘法运算\n     *\n     * @param v1 被乘数\n     * @param v2 乘数\n     * @return 两个参数的积\n     */\n    public static BigDecimal mul(String v1, String v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.multiply(b2);\n    }\n\n    /**\n     * 提供精确的乘法运算\n     *\n     * @param v1    被乘数\n     * @param v2    乘数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的积\n     */\n    public static double mul(double v1, double v2, int scale) {\n        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n        return round(b1.multiply(b2).doubleValue(), scale);\n    }\n\n    /**\n     * 提供精确的乘法运算\n     *\n     * @param v1    被乘数\n     * @param v2    乘数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的积\n     */\n    public static String mul(String v1, String v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到\n     * 小数点以后10位，以后的数字四舍五入\n     *\n     * @param v1 被除数\n     * @param v2 除数\n     * @return 两个参数的商\n     */\n\n    public static double div(double v1, double v2) {\n        return div(v1, v2, DEF_DIV_SCALE);\n    }\n\n    /**\n     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指\n     * 定精度，以后的数字四舍五入\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 表示表示需要精确到小数点以后几位。\n     * @return 两个参数的商\n     */\n    public static double div(double v1, double v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException("The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(Double.toString(v1));\n        BigDecimal b2 = new BigDecimal(Double.toString(v2));\n        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();\n    }\n\n    /**\n     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指\n     * 定精度，以后的数字四舍五入\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 表示需要精确到小数点以后几位\n     * @return 两个参数的商\n     */\n    public static String div(String v1, String v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException("The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v1);\n        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 提供精确的小数位四舍五入处理\n     *\n     * @param v     需要四舍五入的数字\n     * @param scale 小数点后保留几位\n     * @return 四舍五入后的结果\n     */\n    public static double round(double v, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException("The scale must be a positive integer or zero");\n        }\n        BigDecimal b = new BigDecimal(Double.toString(v));\n        return b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();\n    }\n\n    /**\n     * 提供精确的小数位四舍五入处理\n     *\n     * @param v     需要四舍五入的数字\n     * @param scale 小数点后保留几位\n     * @return 四舍五入后的结果\n     */\n    public static String round(String v, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        BigDecimal b = new BigDecimal(v);\n        return b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 取余数\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 小数点后保留几位\n     * @return 余数\n     */\n    public static String remainder(String v1, String v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    }\n\n    /**\n     * 取余数  BigDecimal\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 小数点后保留几位\n     * @return 余数\n     */\n    public static BigDecimal remainder(BigDecimal v1, BigDecimal v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    "The scale must be a positive integer or zero");\n        }\n        return v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);\n    }\n\n    /**\n     * 比较大小\n     *\n     * @param v1 被比较数\n     * @param v2 比较数\n     * @return 如果v1 大于v2 则 返回true 否则false\n     */\n    public static boolean compare(String v1, String v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        int bj = b1.compareTo(b2);\n        boolean res;\n        if (bj > 0){\n            res = true;\n        } else{\n            res = false;\n        }\n        return res;\n    }\n}\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);