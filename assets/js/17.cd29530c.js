(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{434:function(t,e,r){"use strict";r.r(e);var v=r(2),s=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("http://i.heyige.cn/java/servlet.html")])]),t._v(" "),e("h2",{attrs:{id:"servlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet"}},[t._v("#")]),t._v(" servlet")]),t._v(" "),e("h3",{attrs:{id:"servlet作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet作用"}},[t._v("#")]),t._v(" Servlet作用")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("接收客户端请求，完成操作。")]),t._v(" "),e("li",[t._v("动态生成网页（页面数据可变）。")]),t._v(" "),e("li",[t._v("将包含操作结果的动态网页响应给客户端")])])]),t._v(" "),e("h3",{attrs:{id:"servlet核心接口和类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet核心接口和类"}},[t._v("#")]),t._v(" Servlet核心接口和类")]),t._v(" "),e("blockquote",[e("p",[t._v("在Servlet体系结构中，除了实现Servlet接口，还可以通过继承GenericServlet 或 HttpServlet类，完成编写")])]),t._v(" "),e("h3",{attrs:{id:"servlet接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet接口"}},[t._v("#")]),t._v(" servlet接口")]),t._v(" "),e("ul",[e("li",[t._v("init(ServletConfig config) # 初始化servlet的方法")]),t._v(" "),e("li",[t._v("ServletConfig getServletConfig() # 获取ServletConfig配置对象")]),t._v(" "),e("li",[t._v("service(ServletRequest req,ServletResponse res) #核心的处理请求的方法")]),t._v(" "),e("li",[t._v("String getServletInfo() # 获取servlet信息的，返回字串")]),t._v(" "),e("li",[t._v("destroy( ) # 请求处理完成后，servlet销毁的方法")])]),t._v(" "),e("h3",{attrs:{id:"genericservlet抽象类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#genericservlet抽象类"}},[t._v("#")]),t._v(" GenericServlet抽象类")]),t._v(" "),e("blockquote",[e("p",[t._v("GenericServlet 使编写 Servlet 变得更容易。它提供生命周期方法 init 和 destroy 的简单实现，要编写一般的 Servlet，只需重写抽象 service 方法即可。")])]),t._v(" "),e("h3",{attrs:{id:"httpservlet类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#httpservlet类"}},[t._v("#")]),t._v(" HttpServlet类")]),t._v(" "),e("blockquote",[e("p",[t._v("HttpServlet是继承GenericServlet的基础上进一步的扩展。 提供将要被子类化以创建适用于 Web 站点的 HTTP servlet 的抽象类。")]),t._v(" "),e("p",[t._v("HttpServlet 的子类至少必须重写一个方法，该方法通常是以下这些方法之一： doGet，如果 servlet 支持 HTTP GET 请求 doPost，用于 HTTP POST 请求 doPut，用于 HTTP PUT 请求 doDelete，用于 HTTP DELETE 请求")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * Servlet implementation class HelloServlet\n * Servlet的第二种创建方式，继承HttpServlet.也是开发中推荐的\n * \n */\npublic class HelloServlet extends HttpServlet {\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\n\t\tresponse.getWriter().print("welcome use servlet");\n\t}\n    \n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tdoGet(request, response);\n\t}\n}\n')])])]),e("h3",{attrs:{id:"request主要方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#request主要方法"}},[t._v("#")]),t._v(" request主要方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("方法名")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("String getParameter(String name)")]),t._v(" "),e("td",[t._v("根据表单组件名称获取提交数据")])]),t._v(" "),e("tr",[e("td",[t._v("void setCharacterEncoding(String charset)")]),t._v(" "),e("td",[t._v("指定每个请求的编码")])])])]),t._v(" "),e("h3",{attrs:{id:"response对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response对象"}},[t._v("#")]),t._v(" response对象")]),t._v(" "),e("blockquote",[e("p",[t._v("response对象用于响应客户请求并向客户端输出信息。")])]),t._v(" "),e("h3",{attrs:{id:"response主要方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response主要方法"}},[t._v("#")]),t._v(" response主要方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法名称")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("setHeader(name,value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置响应信息头")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("setContentType(String)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置响应文件类型、响应式的编码格式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("setCharacterEncoding(String)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置服务端响应内容编码格式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("getWriter()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("获取字符输出流")])])])]),t._v(" "),e("h2",{attrs:{id:"cookie-小饼干"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-小饼干"}},[t._v("#")]),t._v(" Cookie 小饼干")]),t._v(" "),e("h3",{attrs:{id:"cookie优点和缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie优点和缺点"}},[t._v("#")]),t._v(" Cookie优点和缺点")]),t._v(" "),e("h3",{attrs:{id:"优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("可配置到期规则。")]),t._v(" "),e("li",[t._v("简单性：Cookie 是一种基于文本的轻量结构，包含简单的键值对。")]),t._v(" "),e("li",[t._v("数据持久性：Cookie默认在过期之前是可以一直存在客户端"),e("strong",[t._v("浏览器上")]),t._v("的。")])])]),t._v(" "),e("h3",{attrs:{id:"缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("大小受到限制：大多数浏览器对 Cookie 的大小有 4K、8K字节的限制。")]),t._v(" "),e("li",[t._v("用户配置为禁用：有些用户禁用了浏览器或客户端设备接收 Cookie 的能力，因此限制了这一功能。")]),t._v(" "),e("li",[t._v("潜在的安全风险：Cookie 可能会被篡改。会对安全性造成潜在风险或者导致依赖于Cookie 的应用程序失败。")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);