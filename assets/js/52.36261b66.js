(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{474:function(a,t,s){"use strict";s.r(t);var n=s(2),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-从当前日期往前一个月"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-从当前日期往前一个月"}},[a._v("#")]),a._v(" 1 从当前日期往前一个月")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("WITH RECURSIVE date_series AS (\n    SELECT DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AS day\n    UNION ALL\n    SELECT DATE_ADD(day, INTERVAL 1 DAY)\n    FROM date_series\n    WHERE day < CURDATE() - INTERVAL 1 DAY\n)\n这个生成了\n2023-12-23\n2023-12-24\n2023-12-25\n2023-12-26\n2023-12-27\n2023-12-28\n2023-12-29\n2023-12-30\n2023-12-31\n2024-01-01\n2024-01-02\n2024-01-03\n2024-01-04\n2024-01-05\n2024-01-06\n2024-01-07\n2024-01-08\n2024-01-09\n2024-01-10\n2024-01-11\n2024-01-12\n2024-01-13\n2024-01-14\n2024-01-15\n2024-01-16\n2024-01-17\n2024-01-18\n2024-01-19\n2024-01-20\n2024-01-21\n2024-01-22\n")])])]),t("h2",{attrs:{id:"_2-当前日期前一个月"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-当前日期前一个月"}},[a._v("#")]),a._v(" 2 当前日期前一个月")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("WITH RECURSIVE date_series AS (\n    SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01') AS day\n    UNION ALL\n    SELECT DATE_FORMAT(DATE_ADD(day, INTERVAL 1 DAY), '%Y-%m-%d')\n    FROM date_series\n    WHERE DATE_FORMAT(DATE_ADD(day, INTERVAL 1 DAY), '%Y-%m-%d') <= LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))\n)\n2023-12-01\n2023-12-02\n2023-12-03\n2023-12-04\n2023-12-05\n2023-12-06\n2023-12-07\n2023-12-08\n2023-12-09\n2023-12-10\n2023-12-11\n2023-12-12\n2023-12-13\n2023-12-14\n2023-12-15\n2023-12-16\n2023-12-17\n2023-12-18\n2023-12-19\n2023-12-20\n2023-12-21\n2023-12-22\n2023-12-23\n2023-12-24\n2023-12-25\n2023-12-26\n2023-12-27\n2023-12-28\n2023-12-29\n2023-12-30\n2023-12-31\n")])])]),t("h2",{attrs:{id:"_3-手动分页service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-手动分页service"}},[a._v("#")]),a._v(" 3 手动分页service")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("        // 计算起始索引和结束索引\n        int startIndex = (int) ((req.getPage() - 1) * req.getLimit());\n        int endIndex = (int) Math.min(startIndex + req.getLimit(), dtoiPage.size());\n        // 截取分页数据\n        List<EnterpriseLeaderBoardDTO> pageData = dtoiPage.subList(startIndex, endIndex);\n        resp.setList(pageData);\n")])])]),t("h2",{attrs:{id:"_4-批量插入-foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-批量插入-foreach"}},[a._v("#")]),a._v(" 4 批量插入 foreach")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<insert id="saveDataDayBatch">\n    insert into lb_enterprise_data_day (id, tenant_code, carbon_total, create_date)\n    values\n    <foreach collection="list" separator="," item="item">\n        (#{item.id} ,#{item.tenantCode} ,#{item.carbonTotal} ,#{item.createDate})\n    </foreach>\n</insert>\n')])])]),t("h2",{attrs:{id:"试卷1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#试卷1"}},[a._v("#")]),a._v(" 试卷1")]),a._v(" "),t("ol",[t("li",[a._v("ZooKeeper 原理？")]),a._v(" "),t("li",[a._v("ZooKeeper 怎么做的崩溃恢复？")]),a._v(" "),t("li",[a._v("什么是 Zab 协议？")]),a._v(" "),t("li",[a._v("HashMap 底层实现？")]),a._v(" "),t("li",[a._v("ConcurrentHashMap 原理？以及为什么要这样改进？")]),a._v(" "),t("li",[a._v("深挖 CAS？乐观锁？和 ABA 问题？")]),a._v(" "),t("li",[a._v("手写括号算法匹配？")])]),a._v(" "),t("h3",{attrs:{id:"_1-zookeeper-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-zookeeper-问题"}},[a._v("#")]),a._v(" 1.ZooKeeper 问题")]),a._v(" "),t("p",[a._v("答案解析：其实前三个问题的答案是一样的，所以我猜测，应该是应聘者没回答上来要点，所以面试官在刻意引导应聘者。")]),a._v(" "),t("p",[a._v("因为，ZooKeeper 实现的核心原理就是 Zab 协议，而 Zab 协议里面又包含了崩溃修复的具体流程。")]),a._v(" "),t("h3",{attrs:{id:"_2-什么是-zab-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是-zab-协议"}},[a._v("#")]),a._v(" 2.什么是 Zab 协议？")]),a._v(" "),t("p",[a._v("答："),t("strong",[a._v("ZAB （Zookeeper Atomic Broadcast，ZooKeeper 原子消息广播协议）")]),a._v("，它被用于实现分布式系统中的数据一致性和可靠性。")]),a._v(" "),t("p",[a._v("ZAB 协议总共包含以下两部分内容：")]),a._v(" "),t("ol",[t("li",[a._v("ZAB 协议通过两阶段提交的方式来确保分布式系统的一致性。这两阶段分别是：准备阶段和提交阶段。在准备阶段，一个节点（称为 Leader）向其他节点（称为 Follower）发送提案，Follower 接受并确认提案。在提交阶段，Leader 将提案发送给所有节点，并等待多数节点的确认。一旦多数节点发送确认消息，Leader 就可以将提案确定为最终结果，然后通知所有节点进行更新。")]),a._v(" "),t("li",[a._v("ZAB 协议还包括了崩溃恢复机制，当 Leader 节点崩溃时，系统会选择一个新的 Leader 来取代原先的 Leader 节点。新的 Leader 通过比对已完成的事务日志和未完成的临时提案来进行恢复。")])]),a._v(" "),t("p",[a._v("所以，ZAB 协议通过原子广播的方式，在分布式系统中实现了一致性和可靠性，保证了数据的一致性和正确性。")]),a._v(" "),t("h3",{attrs:{id:"_3-zookeeper-如何进行崩溃修复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-zookeeper-如何进行崩溃修复"}},[a._v("#")]),a._v(" 3.ZooKeeper 如何进行崩溃修复？")]),a._v(" "),t("p",[a._v("答：在说崩溃修复之前，我们需要先了解一些前置内容。")]),a._v(" "),t("p",[a._v("在 ZooKeeper 中有三种节点类型，它们分别是：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("Leader（主节点）")]),a._v("：能够处理读写请求，也同时负责同步写事务请求给其他节点且需要保证事务的顺序性，是整个集群的老大。")]),a._v(" "),t("li",[t("strong",[a._v("Follower（跟随者）")]),a._v("：只负责处理读请求，无权写，因此收到写请求需要转发给 Leader 处理，待 Leader 写完后再同步给 Follower。如果 Leader 挂了，那么 Follower 是有资格参与竞选的。")]),a._v(" "),t("li",[t("strong",[a._v("Observer（观察者）")]),a._v("：和 Follower 一样，唯一不同的是，不参与 Leader 的选举，可以利用不参与 Leader 选举的特性用来线性扩展读的 QPS。")])]),a._v(" "),t("p",[a._v("也就是说，所有写操作会先到 Leader 节点，然后 Leader 节点在通过 2PC（两阶段提交：预提交、ACK、确认提交等流程）来进行数据同步，当写入成功过半就认为信息写入成功。而跟随者和观察者是为了增加读性能的，只不过跟随者还可以通过竞选主节点来保证集群的稳定性。")]),a._v(" "),t("p",[a._v("了解了这些之后，我们再来看 ZooKeeper 崩溃修复的流程（也就是当主节点崩溃后的流程），咱们先假设 ZooKeeper 集群有两个节点，ServerA 和 ServerB，它的崩溃修复的选举流程如下：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("各自投票")]),a._v("：")]),a._v(" "),t("li",[a._v("ServerA 先投票给自己，投票信息包含节点 sid 和 zxid，sid 就是 myid（集群 ID，启动集群时必须设置的 ID，是在配置文件当中配置死的，整个集群内唯一），zxid 是事务 id，自增（每次写入操作时生成）。假设 ServerA 将票投给自己，那么投票信息就为 (1,1)。")]),a._v(" "),t("li",[a._v("ServerB 也投票给自己，假设 ServerB 的 sid 为 2 ，那么此时 ServerB 投票信息为 (2,1)。")]),a._v(" "),t("li",[t("strong",[a._v("投票广播")]),a._v("：")]),a._v(" "),t("li",[a._v("接下来 ServerA 和 ServerB 分别将自己的投票信息广播给集群中其他节点。也就是 ServerA 将（1,1） 广播给 ServerB， ServerB 将（2,1）广播给 ServerA。")]),a._v(" "),t("li",[a._v("ServerA 收到 ServerB 的投票信息后，检查下 ServerB 的状态是否是本轮投票，以及是否是 LOOKING 寻主的状态。 反之，ServerB 收到 ServerA 的投票信息后也是一样的。")]),a._v(" "),t("li",[t("strong",[a._v("投票对比")]),a._v("：优先对比 zxid，其次对比 sid。ServerA 会将自己的投票和 ServerB 的投票进行对比，先对比 zxid 发现 zxid 一样，然后对比 sid，发现 ServerB 的 sid 大于 ServerA 的 sid，所以此时 ServerA 就会更改投票信息为 (2,1)，然后将投票信息再次发送出去。而 ServerB 不需要更新投票信息，但是下一轮还需要再次将投票发出去。")]),a._v(" "),t("li",[t("strong",[a._v("统计投票")]),a._v("：每一轮投票都会统计每台节点的投票信息，判断是否有过半的节点收到了相同的投票信息，如果过半，则将投票过半的节点升级为 Leader。ServerA 和 ServerB 收到的投票信息都为 (2,1)，且数量来说，大于一半节点的数量，所以将 ServerB 选出来作为 Leader。")]),a._v(" "),t("li",[t("strong",[a._v("更新节点状态")]),a._v("：ServerA 作为 Follower，更新状态为 FOLLOWING，ServerB 作为 Leader。")])]),a._v(" "),t("p",[a._v("以上就是 ZooKeeper 崩溃修复的选举流程，当然 ZooKeeper 集群启动的选主投票也是类似的。当完成选择流程之后，我们的 ZooKeeper 集群也就完成了崩溃修复了。")]),a._v(" "),t("h3",{attrs:{id:"_4-hashmap-底层实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-hashmap-底层实现"}},[a._v("#")]),a._v(" 4.HashMap 底层实现？")]),a._v(" "),t("p",[a._v("答：HashMap 底层实现在 JDK1.7 和 JDK1.8 是不一样的，"),t("strong",[a._v("在 JDK1.7 中，HashMap 使用的是数组+链表实现的，而 JDK1.8 中使用的是数组+链表或红黑树实现的")]),a._v("。 HashMap 在 JDK1.7 中的实现如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-db2405e4f95689e7c2f57b5eab05dcce_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("HashMap 在 JDK1.8 中的实现如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-9dac9d7ac09b30bcd6080c63efd30d02_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("HashMap 中每个元素称之为一个哈希桶（bucket），哈希桶包含的内容有以下 4 项：")]),a._v(" "),t("ul",[t("li",[a._v("hash值")]),a._v(" "),t("li",[a._v("key")]),a._v(" "),t("li",[a._v("value")]),a._v(" "),t("li",[a._v("next（下一个节点）")])]),a._v(" "),t("p",[a._v("默认情况下，在 JDK 1.8+ 版本中，HashMap 使用的是数组加链表的形式存储的，而当数组的长度大于 64，并且链表的长度大于 8 时，就会将链表升级为红黑树，以增加 HashMap 查询时的性能。")]),a._v(" "),t("h3",{attrs:{id:"_5-concurrenthashmap-原理-为什么要这样改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-concurrenthashmap-原理-为什么要这样改进"}},[a._v("#")]),a._v(" 5.ConcurrentHashMap 原理？为什么要这样改进？")]),a._v(" "),t("p",[a._v("答：ConcurrentHashMap 在不同的 JDK 版本中实现也是不一样的，**在 JDK1.7 中它使用的是数组加链表的形式实现的，而数组又分为：大数组 Segment 和小数组 HashEntry。**大数组 Segment 可以理解为 MySQL 中的数据库，而每个数据库（Segment）中又有很多张表 HashEntry，每个 HashEntry 中又有多条数据，这些数据是用链表连接的，如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-249b8f6d4b7694681de02cff37ac4867_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("而在 JDK 1.7 中，ConcurrentHashMap 是通过在 Segment 加锁来保证其安全性的，所以我们把它称之为分段锁或片段锁，如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-885e6909219e57095ac0a8a4ae441acb_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("它的实现源码如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-3f330c35f77f7ed8eb23bd65403d65c2_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("从上面源码可以看出，JDK 1.7 时，ConcurrentHashMap 主要是用 Lock 进行加锁来实现线程安全的。")]),a._v(" "),t("p",[a._v("而在 JDK 1.8 中，它是使用了数组+链表/红黑树的方式优化了 ConcurrentHashMap 的实现，具体实现结构如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-465389800a200871c681d5bcfed8cdaa_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("链表升级为红黑树的规则：当链表长度大于 8，并且数组的长度大于 64 时，链表就会升级为红黑树的结构。")]),a._v(" "),t("blockquote",[t("p",[a._v("PS：ConcurrentHashMap 在 JDK1.8 虽然保留了 Segment 的定义，但这仅仅是为了保证序列化时的兼容性，不再有任何结构上的用处了。")])]),a._v(" "),t("p",[a._v("在 JDK1.8 中 ConcurrentHashMap 使用的是 CAS+volatile 或 synchronized 的方式来保证线程安全的，它的核心实现源码如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-25064cda72a3989829660b8490a84da9_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("p",[a._v("从上述源码可以看出，在 JDK1.8 中，添加元素时首先会判断容器是否为空，如果为空则使用 volatile 加 CAS 来初始化。如果容器不为空则根据存储的元素计算该位置是否为空，如果为空则利用 CAS 设置该节点；如果不为空则使用 synchronize 加锁，遍历桶中的数据，替换或新增节点到桶中，最后再判断是否需要转为红黑树，这样就能保证并发访问时的线程安全了。")]),a._v(" "),t("p",[a._v("我们把上述流程简化一下，我们可以简单的认为在 JDK1.8 中，ConcurrentHashMap 是在头节点加锁来保证线程安全的，锁的粒度相比 Segment 来说更小了，发生冲突和加锁的频率降低了，并发操作的性能就提高了。而且 JDK1.8 使用的是红黑树优化了之前的固定链表，那么当数据量比较大的时候，查询性能也得到了很大的提升，从之前的 O(n) 优化到了 O(logn) 的时间复杂度，具体加锁示意图如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-8b6082ae13a579cc0bb38d679aacfbad_720w.webp",alt:"img"}})]),a._v(" "),t("p",[a._v("image.png")]),a._v(" "),t("h3",{attrs:{id:"_6-乐观锁-cas-aba-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-乐观锁-cas-aba-问题"}},[a._v("#")]),a._v(" 6.乐观锁？CAS？ABA 问题？")]),a._v(" "),t("p",[a._v("答：乐观锁是一种并发控制机制，它的核心思想是假设在大多数情况下，并发操作之间不会产生冲突，因此不需要使用显式的锁进行串行化处理，而是只在提交操作时检查是否发生了冲突。")]),a._v(" "),t("blockquote",[t("p",[a._v("所以乐观锁是一种实现锁的策略，而这种策略的实现主要是依靠 CAS 机制。")])]),a._v(" "),t("p",[a._v("CAS 是 Compare and Swap（比较并交换）的缩写，是一种并发算法，常用于实现乐观锁。")]),a._v(" "),t("p",[a._v("CAS 操作包含三个参数：一个内存位置（通常是一段数据的地址）、期望的值和新的值。CAS 操作的执行过程如下：")]),a._v(" "),t("ol",[t("li",[a._v("首先，将内存位置的当前值与期望的值进行比较。")]),a._v(" "),t("li",[a._v("如果相等，说明内存位置的值没有改变，就使用新的值替换原来的值，然后返回 true，表示替换成功。")]),a._v(" "),t("li",[a._v("如果不相等，说明内存位置的值发生了改变，可能有其他线程修改了该值，那么 CAS 操作失败并返回 false。")])]),a._v(" "),t("blockquote",[t("p",[a._v("然而，需要注意的是，CAS 操作并不能解决所有并发问题，因为它仍然存在 ABA 问题。")])]),a._v(" "),t("p",[a._v("ABA 问题是指在并发环境下，一个变量从初始值 A 经过一系列操作变为 B，然后再回到 A。这样，观察变量的线程可能无法察觉到中间的操作，从而引发一些意外的问题。")]),a._v(" "),t("p",[a._v("具体来说，假设线程 T1 从初始值 A 开始，使用 CAS 将变量的值从 A 替换为 B，然后又将 B 替换为 A。与此同时，线程 T2 在 T1 操作之前读取了变量的值 A，然后在 T1 操作之后读取了相同的值 A，发现两次读取的值相同，认为变量没有发生变化。")]),a._v(" "),t("p",[a._v("为了解决 ABA 问题，常用的方法是使用带有版本号或时间戳的 CAS 操作。")]),a._v(" "),t("p",[a._v("具体操作如下：")]),a._v(" "),t("ol",[t("li",[a._v("在变量中引入一个版本号或时间戳。")]),a._v(" "),t("li",[a._v("在执行 CAS 操作时，除了比较变量的值外，还要比较版本号或时间戳。")]),a._v(" "),t("li",[a._v("如果变量的值和版本号都匹配，则可以执行 CAS 操作。")])]),a._v(" "),t("p",[a._v("通过引入版本号或时间戳，可以在比较变量值时同时检测到变量的变化历史。即使变量的值回到了 A，但是版本号或时间戳已经被改变，从而避免了 ABA 问题。")]),a._v(" "),t("h3",{attrs:{id:"_7-括号算法匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-括号算法匹配"}},[a._v("#")]),a._v(" 7.括号算法匹配？")]),a._v(" "),t("p",[a._v("题目详见："),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//leetcode.cn/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://leetcode.cn/problems/valid-parentheses/"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("strong",[a._v("算法实现原理")])]),a._v(" "),t("ul",[t("li",[a._v("栈先入后出特点恰好与本题括号排序特点一致，即若遇到左括号入栈，遇到右括号时将对应栈顶左括号出栈，则遍历完所有括号后 stack 仍然为空；")]),a._v(" "),t("li",[a._v("建立哈希表构建左右括号对应关系：key 左括号，value 右括号；这样查询 222 个括号是否对应只需 O(1) 时间复杂度；建立栈 stack，遍历字符串 s 并按照算法流程一一判断。")])]),a._v(" "),t("p",[t("strong",[a._v("算法实现流程")])]),a._v(" "),t("ul",[t("li",[a._v("如果是左括号，则入栈 push；")]),a._v(" "),t("li",[a._v("否则通过哈希表判断括号对应关系，若 stack 栈顶出栈括号 stack.pop() 与当前遍历括号不对应，则提前返回 false。")])]),a._v(" "),t("p",[a._v("实现代码如下：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Solution")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'{'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'}'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'['")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("']'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'?'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'?'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isValid")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("containsKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("charAt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LinkedList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" stack "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LinkedList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token char"}},[a._v("'?'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Character")]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toCharArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("containsKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addLast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("removeLast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" stack"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);