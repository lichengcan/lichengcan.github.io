(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{587:function(t,n,e){"use strict";e.r(n);var i=e(2),o=Object(i.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"策略模式-strategy-pattern"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#策略模式-strategy-pattern"}},[t._v("#")]),t._v(" 策略模式（Strategy Pattern）")]),t._v(" "),n("p",[t._v("策略模式（Strategy Pattern）是一种行为设计模式，它定义了一系列算法，并将每一个算法封装起来，并且使它们可以相互替换。策略模式让算法独立于使用它的客户而独立变化。这意味着如果你的程序中有一些在不同时间使用不同策略的类，那么使用策略模式可以动态地更改类的操作算法。")]),t._v(" "),n("p",[t._v("让我们通过一个例子来理解策略模式：")]),t._v(" "),n("p",[t._v("假设你正在开发一个导航应用程序，该应用程序需要提供多种方式来计算路线，比如：最快路线、避开高速公路、步行路线等。每种路线计算方式都可以被视为一个策略。")]),t._v(" "),n("p",[t._v("以下是这个例子的伪代码实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 定义策略接口。这里的策略是路线计算\ninterface RouteStrategy {\n    String buildRoute(String pointA, String pointB);\n}\n\n// 第一个具体策略类：最快路线\nclass FastestRoute implements RouteStrategy {\n    public String buildRoute(String pointA, String pointB) {\n        // ... 具体算法实现\n        return "The fastest route from " + pointA + " to " + pointB;\n    }\n}\n\n// 第二个具体策略类：避开高速\nclass AvoidHighwaysRoute implements RouteStrategy {\n    public String buildRoute(String pointA, String pointB) {\n        // ... 具体算法实现\n        return "The route avoiding highways from " + pointA + " to " + pointB;\n    }\n}\n\n// 第三个具体策略类：步行路线\nclass WalkingRoute implements RouteStrategy {\n    public String buildRoute(String pointA, String pointB) {\n        // ... 具体算法实现\n        return "The walking route from " + pointA + " to " + pointB;\n    }\n}\n\n// 上下文，使用策略的类\nclass NavigationApp {\n    private RouteStrategy routeStrategy;\n\n    // 在构造函数中或者通过setter方法可以设置初始策略\n    public NavigationApp(RouteStrategy routeStrategy) {\n        this.routeStrategy = routeStrategy;\n    }\n\n    public void setRouteStrategy(RouteStrategy routeStrategy) {\n        this.routeStrategy = routeStrategy;\n    }\n\n    public String buildRoute(String pointA, String pointB) {\n        // 使用策略对象的方法\n        return this.routeStrategy.buildRoute(pointA, pointB);\n    }\n}\n\n// 客户端代码\npublic class StrategyPatternExample {\n    public static void main(String[] args) {\n        // 初始策略为最快路线\n        NavigationApp navigationApp = new NavigationApp(new FastestRoute());\n\n        // 根据用户需求，可以改变策略\n        navigationApp.setRouteStrategy(new AvoidHighwaysRoute());\n        System.out.println(navigationApp.buildRoute("PointA", "PointB"));\n\n        // 可以随时改变策略\n        navigationApp.setRouteStrategy(new WalkingRoute());\n        System.out.println(navigationApp.buildRoute("PointA", "PointB"));\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=o.exports}}]);