(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{525:function(e,n,a){"use strict";a.r(n);var r=a(2),t=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-primary注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-primary注解"}},[e._v("#")]),e._v(" 1 @Primary注解")]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("@Primary")]),e._v(" 注解是 Spring 框架中的一个注解，它用于标识一个 bean 是首选的，当容器中存在多个相同类型的 bean 时，Spring 会优先选择使用 "),n("code",[e._v("@Primary")]),e._v(" 标记的 bean。")])]),e._v(" "),n("p",[e._v("以下是 "),n("code",[e._v("@Primary")]),e._v(" 注解的一些详细说明：")]),e._v(" "),n("ol",[n("li",[n("strong",[e._v("解决依赖注入歧义性：")]),e._v(" 当你在 Spring 容器中有多个同一类型的 bean，且不确定应该注入哪一个时，使用 "),n("code",[e._v("@Primary")]),e._v(" 可以解决这种歧义性。Spring 容器将优先选择标记为 "),n("code",[e._v("@Primary")]),e._v(" 的 bean 进行注入。")]),e._v(" "),n("li",[n("strong",[e._v("适用于构造函数注入、Setter 方法注入、字段注入等：")]),e._v(" "),n("code",[e._v("@Primary")]),e._v(" 可以用于不同的依赖注入方式，包括构造函数注入、Setter 方法注入以及字段注入。")]),e._v(" "),n("li",[n("strong",[e._v("与"),n("code",[e._v("@Qualifier")]),e._v("一起使用：")]),e._v(" 如果在容器中有多个相同类型的 bean，而你仍需要选择性地注入非首选的 bean，你可以结合使用 "),n("code",[e._v("@Primary")]),e._v(" 和 "),n("code",[e._v("@Qualifier")]),e._v(" 注解。"),n("code",[e._v("@Qualifier")]),e._v(" 允许你指定要注入哪个具体的 bean。")]),e._v(" "),n("li",[n("strong",[e._v("适用于多个配置文件：")]),e._v(" 如果你的应用有多个配置文件，每个配置文件定义了相同类型的 bean，你可以在不同的配置文件中使用 "),n("code",[e._v("@Primary")]),e._v(" 标记不同的 bean，以确定哪个是首选的。")]),e._v(" "),n("li",[n("strong",[e._v("不是强制性的：")]),e._v(" 使用 "),n("code",[e._v("@Primary")]),e._v(" 是可选的，如果没有标记任何 bean 为首选，Spring 将会抛出 NoUniqueBeanDefinitionException 异常，表示依赖注入存在歧义。")])]),e._v(" "),n("p",[e._v("以下是一个示例，说明如何在 Spring 中使用 "),n("code",[e._v("@Primary")]),e._v(" 注解：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component\n@Primary\npublic class MyPrimaryBean implements MyInterface {\n    // ...\n}\n\n@Component\npublic class MySecondaryBean implements MyInterface {\n    // ...\n}\n\n@Service\npublic class MyService {\n    private MyInterface myInterface;\n\n    @Autowired\n    public MyService(MyInterface myInterface) {\n        this.myInterface = myInterface;\n    }\n\n    // ...\n}\n")])])]),n("p",[e._v("在这个示例中，"),n("code",[e._v("MyPrimaryBean")]),e._v(" 被标记为首选 bean，所以当 "),n("code",[e._v("MyService")]),e._v(" 类注入 "),n("code",[e._v("MyInterface")]),e._v(" 时，"),n("code",[e._v("MyPrimaryBean")]),e._v(" 将会被注入。如果没有使用 "),n("code",[e._v("@Primary")]),e._v("，并且存在多个实现了 "),n("code",[e._v("MyInterface")]),e._v(" 的 bean，Spring 将无法决定注入哪一个，从而引发异常。")]),e._v(" "),n("p",[e._v("总之，"),n("code",[e._v("@Primary")]),e._v(" 注解是 Spring 框架中用于解决依赖注入歧义性的有用工具，可以确保容器在有多个相同类型的 bean 时能够正确地选择要注入的 bean。")]),e._v(" "),n("h2",{attrs:{id:"_2-如果primary无法注入到bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-如果primary无法注入到bean"}},[e._v("#")]),e._v(" 2 如果primary无法注入到bean")]),e._v(" "),n("p",[e._v("会抛出 "),n("code",[e._v("NoUniqueBeanDefinitionException")]),e._v(" 异常,指示依赖注入存在歧义，容器无法确定应该注入哪个 bean。")]),e._v(" "),n("h2",{attrs:{id:"_3-primary失败时自动找其他bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-primary失败时自动找其他bean"}},[e._v("#")]),e._v(" 3 primary失败时自动找其他bean")]),e._v(" "),n("blockquote",[n("p",[e._v("如果你在 Spring 中使用 "),n("code",[e._v("@Autowired(required = false)")]),e._v(" 或者 "),n("code",[e._v("Optional")]),e._v(" 来处理 "),n("code",[e._v("@Primary")]),e._v(" bean 无法注入的情况，那么在没有其他同类型的 bean 时，"),n("code",[e._v("myInterface")]),e._v(" 将会保持为 "),n("code",[e._v("null")]),e._v(" 或是一个空的 "),n("code",[e._v("Optional")]),e._v("。Spring 不会自动尝试注入其他同类型的 bean，因此不会将 "),n("code",[e._v("MySecondaryBean")]),e._v(" 或其他同类型的 bean 注入.")])]),e._v(" "),n("p",[e._v("but")]),e._v(" "),n("blockquote",[n("p",[e._v("如果你希望在 "),n("code",[e._v("@Primary")]),e._v(" bean 无法注入时，自动尝试注入其他同类型的 bean，你需要编写自定义逻辑来处理这种情况。这通常涉及编写条件逻辑，以检查是否 "),n("code",[e._v("myInterface")]),e._v(" 为 "),n("code",[e._v("null")]),e._v("，然后手动尝试注入其他 bean，或者根据应用逻辑选择要注入的具体 bean。这不是 Spring 默认的行为，需要自己编码来实现。")])]),e._v(" "),n("p",[e._v("举个示例，以下是一个可能的解决方案：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Service\npublic class MyService {\n    private MyInterface myInterface;\n\n    @Autowired(required = false)\n    public void setMyInterface(MyInterface myInterface) {\n        this.myInterface = myInterface;\n    }\n\n    @Autowired\n    private List<MyInterface> allMyInterfaces;\n\n    @PostConstruct\n    public void initialize() {\n        if (myInterface == null && !allMyInterfaces.isEmpty()) {\n            // 在这里根据你的逻辑选择一个具体的备选 bean\n            // 这里示例中，遍历所有备选 bean 并选择第一个非空的 bean\n            for (MyInterface candidate : allMyInterfaces) {\n                if (candidate != null) {\n                    myInterface = candidate;\n                    break;\n                }\n            }\n\n            if (myInterface == null) {\n                throw new RuntimeException("No suitable bean found for MyInterface.");\n            }\n        }\n    }\n\n    // ...\n}\n\n')])])])])}),[],!1,null,null,null);n.default=t.exports}}]);