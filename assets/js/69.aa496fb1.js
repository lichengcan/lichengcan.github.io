(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{484:function(e,n,t){"use strict";t.r(n);var r=t(2),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("项目地址："),n("a",{attrs:{href:"https://gitee.com/lichengcan0228/common-result.git",target:"_blank",rel:"noopener noreferrer"}},[e._v("全局统一返回+全局异常处理-gitee-simple分支"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"全局统一返回-全局异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局统一返回-全局异常处理"}},[e._v("#")]),e._v(" 全局统一返回+全局异常处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.example.commonresult.result;\n\nimport com.alibaba.fastjson.JSON;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeanInstantiationException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageNotReadableException;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n\n/**\n * 定义全局性的控制器\n * basePackages 作用范围\n * @author lichengcan\n */\n@RestControllerAdvice(basePackages = "com.dataojo.haikangbasic")\npublic class ResponseAdvice implements ResponseBodyAdvice<Object> {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ResponseAdvice.class);\n\n    /**\n     * 环境变量\n     */\n    @Value("${spring.profiles.active}")\n    private String env;\n\n    /**\n     * 是否需要进行统一返回封装\n     */\n    @Override\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n        //定义到类级别：如果类上有这个注解，那就封装\n        if (returnType.getDeclaringClass().getAnnotation(ResponseResult.class)!=null) {\n            return true;\n        }\n        //也可以定义到方法级\n//        if (returnType.getMethodAnnotation(ResponseResult.class)!=null) {\n//            return true;\n//        }\n        return false;\n    }\n\n\n    /**\n     * 此方法才是真正的统一返回封装逻辑\n     */\n    @Override\n    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType,\n                                  Class<? extends HttpMessageConverter<?>> selectedConverterType,\n                                  ServerHttpRequest request, ServerHttpResponse response) {\n        // 提供一定的灵活度，如果body已经被包装了，就不进行包装\n        if (body instanceof Result || body instansof String) {\n            return body;\n        }\n        //包装类型\n        return Result.success(body);\n    }\n\n\n    /**\n     * 处理参数校验失败异常\n     */\n    @ResponseBody\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public Result handleMethodArgumentNotValidException(MethodArgumentNotValidException ex) {\n        BindingResult bindingResult = ex.getBindingResult();\n        String defaultMessage = bindingResult.getAllErrors().get(0).getDefaultMessage();\n        return buildErrorResponse(ResultEnum.SYSTEM_EXCEPTION.getCode(), defaultMessage);\n    }\n\n    /**\n     * 处理 Request Valid 异常\n     */\n    @ResponseBody\n    @ExceptionHandler(BindException.class)\n    public Result handleBindException(BindException ex) {\n        String defaultMessage = ex.getAllErrors().get(0).getDefaultMessage();\n        return buildErrorResponse(ResultEnum.SYSTEM_EXCEPTION.getCode(), defaultMessage);\n    }\n\n    /**\n     * 处理 BeanInstantiationException 异常\n     */\n    @ResponseBody\n    @ExceptionHandler(BeanInstantiationException.class)\n    public Result handleBeanInstantiationException(BeanInstantiationException ex) {\n        Throwable cause = ex.getCause();\n        return buildErrorResponse(ResultEnum.SYSTEM_EXCEPTION.getCode(), cause.getMessage());\n    }\n\n    /**\n     * 处理所有其他异常\n     */\n    @ResponseBody\n    @ExceptionHandler(Exception.class)\n    public Result handleException(Exception ex) {\n        LOG.error("系统异常", ex);\n        String message;\n        if (ex instanceof HttpMessageNotReadableException) {\n            message = "请求参数格式错误";\n        } else if (ex instanceof HttpRequestMethodNotSupportedException) {\n            message = "不支持的请求方式";\n        } else {\n            message = "系统繁忙，请稍后再试";\n        }\n        return buildErrorResponse(ResultEnum.SYSTEM_EXCEPTION.getCode(), message);\n    }\n\n    /**\n     * 构建错误响应\n     */\n    private Result buildErrorResponse(String code, String message) {\n        if ("dev".equals(env)) {\n            return Result.failed(code, message);\n        } else {\n            return Result.failed(code, null);\n        }\n    }\n}\n\n')])])]),n("h3",{attrs:{id:"自定义注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[e._v("#")]),e._v(" 自定义注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.example.commonresult.result;\n\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * 统一返回注解\n */\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface ResponseResult {\n}\n")])])]),n("h2",{attrs:{id:"统一返回数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#统一返回数据结构"}},[e._v("#")]),e._v(" 统一返回数据结构")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.example.commonresult.result;\n\nimport lombok.Data;\n\n/**\n * 统一返回数据结构\n *\n * @param <T>\n */\n@Data\npublic class Result<T> {\n    private String code;\n    private String message;\n    private T data;\n\n    public Result() {\n    }\n\n    public Result(String code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public Result(String code, String message, T data) {\n        this.code = code;\n        this.message = message;\n        this.data = data;\n    }\n\n    public static <T> Result<T> success(T data) {\n        return new Result<>(ResultEnum.SUCCESS.getCode(), ResultEnum.SUCCESS.getMessage(), data);\n    }\n\n    public static Result<?> failed(String code, String message) {\n        return new Result<>(code, message);\n    }\n}\n\n")])])]),n("h2",{attrs:{id:"枚举"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[e._v("#")]),e._v(" 枚举")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.example.commonresult.result;\n\n/**\n * 常用结果的枚举\n */\npublic enum ResultEnum {\n    SUCCESS("00000", "请求成功"),\n    VALIDATE_FAILED("2002", "参数校验失败"),\n    COMMON_FAILED("2003", "接口调用失败"),\n    FORBIDDEN("2004", "没有权限访问资源"),\n    USER_EXCEPTION("A0001", "用户端错误"),\n    SYSTEM_EXCEPTION("B0001", "系统执行出错"),\n    THIRD_PARTY_SERVICE_INVOKE_EXCEPTION("C0001", "调用第三方服务出错");\n\n    private String code;\n    private String message;\n\n    // 构造方法\n    ResultEnum(String code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public String getCode() {\n        return code;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n')])])]),n("h3",{attrs:{id:"依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[e._v("#")]),e._v(" 依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        \x3c!-- lombok --\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        \x3c!-- alibaba fastjson --\x3e\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.83</version>\n        </dependency>\n\n        \x3c!-- spring data --\x3e\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-commons</artifactId>\n        </dependency>\n")])])]),n("h2",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.example.commonresult.controller;\n\nimport com.example.commonresult.result.ResponseResult;\nimport com.example.commonresult.result.Result;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author: lichengcan\n * @date: 2023-09-07 15:23\n * @description\n **/\n@RestController\n@RequestMapping("/test")\n@ResponseResult\npublic class TestController {\n\n    @GetMapping("/test")\n    public Object test(Integer num){\n        Map map  = new HashMap();\n        int j = 10/num;\n        map.put(1,1);\n        return Result.success(map);\n    }\n\n    @GetMapping("/list")\n    public List<Integer> list(Integer num){\n        List<Integer> list = new ArrayList<>(num);\n        for (int i = 0; i < num; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    @GetMapping("/exception")\n    public void exception(Integer num){\n        int j = 10/num;\n    }\n\n    @GetMapping("/testString")\n    public String testString(Integer num){\n        return "李承灿大帅逼";\n    }\n\n\n    @GetMapping("/testInteger")\n    public Integer testInteger(Integer num){\n        return num;\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);