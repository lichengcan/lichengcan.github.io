(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{576:function(n,t,e){"use strict";e.r(t);var r=e(2),a=Object(r.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h4",{attrs:{id:"_1-基于雪花算法生成的长整型id"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于雪花算法生成的长整型id"}},[this._v("#")]),this._v(" 1 基于雪花算法生成的长整型ID")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("@Component\npublic class IdGeneratorSnowflake {\n\n    /**\n     * 工作节点ID，用于标识分布式系统中的某一特定机器，可通过机器IP地址转换得到\n     */\n    private long workerId = 0;\n    /**\n     * 数据中心ID，用于标识分布式系统中的某一特定数据中心，可根据实际数据中心划分策略设定\n     */\n    private long datacenterId = 1;\n    private Snowflake snowflake = IdUtil.getSnowflake(workerId, datacenterId);\n\n    /**\n     * Spring框架启动后自动调用此方法，进行初始化工作\n     */\n    @PostConstruct\n    public void init() {\n        try {\n            // 获取当前服务器IPv4地址并转换为长整型数字作为工作节点ID\n            workerId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());\n        } catch (Exception e) {\n            // 若出现异常，可选择使用本地主机字符串哈希值作为备用的工作节点ID\n            e.printStackTrace();\n            workerId = NetUtil.getLocalhostStr().hashCode();\n        }\n    }\n\n    /**\n     * 获取下一个全局唯一ID\n     * @return 返回一个基于雪花算法生成的长整型ID\n     */\n    public synchronized Long snowflakeId() {\n        return snowflake.nextId();\n    }\n\n}\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);