(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{580:function(t,a,_){"use strict";_.r(a);var v=_(2),s=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_1、-自我介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-自我介绍"}},[t._v("#")]),t._v(" 1、 自我介绍；")]),t._v(" "),a("h3",{attrs:{id:"_2、-平时你是如何学习-java-方面技术的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-平时你是如何学习-java-方面技术的"}},[t._v("#")]),t._v(" 2、 平时你是如何学习 Java 方面技术的？")]),t._v(" "),a("p",[t._v("1.查看官方的介绍")]),t._v(" "),a("p",[t._v("2.进行使用，代码编写，或者去GitHub找一个项目拉下来练习")]),t._v(" "),a("p",[t._v("3.网上查资料看看有没有什么特别需要注意的地方（如redis缓存击穿")]),t._v(" "),a("h3",{attrs:{id:"_3、-完成团队项目时你是如何与团队协作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、-完成团队项目时你是如何与团队协作的"}},[t._v("#")]),t._v(" 3、 完成团队项目时你是如何与团队协作的？")]),t._v(" "),a("p",[t._v("需求讨论、架构设计、数据库设计、接口设计、实现、测试，git，模块化，微服务")]),t._v(" "),a("h3",{attrs:{id:"_4、-简历上项目的核心功能有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、-简历上项目的核心功能有哪些"}},[t._v("#")]),t._v(" 4、 简历上项目的核心功能有哪些？")]),t._v(" "),a("p",[t._v("1.sql优化")]),t._v(" "),a("p",[t._v("2.查询缓慢接口优化，")]),t._v(" "),a("p",[t._v("3.数据库表设计（责任人模块）")]),t._v(" "),a("p",[t._v("一个采集任务可对应多个模板")]),t._v(" "),a("p",[t._v("一个模板--可以由多个excel组成")]),t._v(" "),a("p",[t._v("一个excel可有多个sheet组成")]),t._v(" "),a("p",[t._v("责任人分配要精确到每一个sheet")]),t._v(" "),a("p",[t._v("采集任务表：collect")]),t._v(" "),a("p",[t._v("模板表：template")]),t._v(" "),a("p",[t._v("采集任务-模板-关联表：collect_template")]),t._v(" "),a("p",[t._v("excel表：excel")]),t._v(" "),a("p",[t._v("采集任务关联excel表：excel_collect")]),t._v(" "),a("p",[t._v("sheet表：sheet")]),t._v(" "),a("p",[t._v("采集任务关联sheet表：sheet_collect")]),t._v(" "),a("p",[t._v("责任人表：charge")]),t._v(" "),a("h3",{attrs:{id:"_5、-介绍-springcloud-在这个项目中的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、-介绍-springcloud-在这个项目中的使用"}},[t._v("#")]),t._v(" 5、 介绍 SpringCloud 在这个项目中的使用？")]),t._v(" "),a("p",[t._v("1.模块化（将复杂的项目分成一个个小模块，互不影响，使用fegin调用")]),t._v(" "),a("p",[t._v("2.解耦")]),t._v(" "),a("h3",{attrs:{id:"_6、-一个前端请求在你项目中的处理链路是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、-一个前端请求在你项目中的处理链路是什么"}},[t._v("#")]),t._v(" 6、 一个前端请求在你项目中的处理链路是什么？")]),t._v(" "),a("p",[t._v("1.接受请求，路由处理找到对应的控制器")]),t._v(" "),a("p",[t._v("2.身份验证与授权")]),t._v(" "),a("p",[t._v("3.业务逻辑处理")]),t._v(" "),a("p",[t._v("4.数据访问")]),t._v(" "),a("p",[t._v("5.响应")]),t._v(" "),a("p",[t._v("6.日志和监控")]),t._v(" "),a("p",[t._v("7.异常处理")]),t._v(" "),a("p",[t._v("8.性能优化、安全性处理csrf、xss")]),t._v(" "),a("p",[t._v("9.缓存、响应压缩、反向代理")]),t._v(" "),a("h3",{attrs:{id:"_7、-gateway-和-nginx-的相同点和不同点在那里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、-gateway-和-nginx-的相同点和不同点在那里"}},[t._v("#")]),t._v(" 7、 GateWay 和 Nginx 的相同点和不同点在那里？")]),t._v(" "),a("h3",{attrs:{id:"_8、-geteway-处理后请求在微服务中的进一步处理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、-geteway-处理后请求在微服务中的进一步处理是什么"}},[t._v("#")]),t._v(" 8、 GeteWay 处理后请求在微服务中的进一步处理是什么？")]),t._v(" "),a("h3",{attrs:{id:"_9、-gateway-需要注册到-nacos-中吗-如何注册的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、-gateway-需要注册到-nacos-中吗-如何注册的"}},[t._v("#")]),t._v(" 9、 GateWay 需要注册到 Nacos 中吗？如何注册的？")]),t._v(" "),a("h3",{attrs:{id:"_10、jvm-jdk-jre-三者的之间的联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、jvm-jdk-jre-三者的之间的联系"}},[t._v("#")]),t._v(" 10、JVM，JDK，JRE 三者的之间的联系？")]),t._v(" "),a("p",[t._v("1.jdk包含jre包含jvm")]),t._v(" "),a("p",[t._v("2.jdk：有编译、运行时环境")]),t._v(" "),a("p",[t._v("3.jre：是运行时环境，还有Java核心的类库")]),t._v(" "),a("p",[t._v("4.jvm是虚拟机：负责执行字节码-变成机器可以识别的机器码，是跨平台的关键")]),t._v(" "),a("h3",{attrs:{id:"_11、方法重载和方法重写区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、方法重载和方法重写区别"}},[t._v("#")]),t._v(" 11、方法重载和方法重写区别？")]),t._v(" "),a("p",[t._v("重载")]),t._v(" "),a("p",[t._v("1.方法的名称必须一致，")]),t._v(" "),a("p",[t._v("2.方法中的参数类型、个数、顺序不一致")]),t._v(" "),a("p",[t._v("3.重载的方法和原来的方法没有关系")]),t._v(" "),a("p",[t._v("4.可以有不同的返回类型")]),t._v(" "),a("p",[t._v("5.重载在编译的时候就确定了要调用的方法")]),t._v(" "),a("p",[t._v("6.在本类中重载")]),t._v(" "),a("p",[t._v("重写")]),t._v(" "),a("p",[t._v("1.需要用orrivide修饰")]),t._v(" "),a("p",[t._v("2.方法的名称和参数类型、个数都必须和重写的方法一致")]),t._v(" "),a("p",[t._v("3.返回类型也得和重写的方法一致")]),t._v(" "),a("p",[t._v("4.重写需要在运行时动态的判断调用哪个方法")]),t._v(" "),a("p",[t._v("5.在子类中重写父类的方法")]),t._v(" "),a("h3",{attrs:{id:"_12、接口和抽象类之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、接口和抽象类之间的区别"}},[t._v("#")]),t._v(" 12、接口和抽象类之间的区别？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",[t._v("interface")]),t._v(" "),a("th",[t._v("abstract")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1.定义")]),t._v(" "),a("td",[t._v("interface修饰的类，定义方法，不实现")]),t._v(" "),a("td",[t._v("abstract修饰的方法，可选择是否实现")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2.继承")]),t._v(" "),a("td",[t._v("一个类可以多继承interface")]),t._v(" "),a("td",[t._v("一个类只能继承一个抽象类")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3.字段")]),t._v(" "),a("td",[t._v("常量：public static final")]),t._v(" "),a("td",[t._v("没有限制")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4.构造函数")]),t._v(" "),a("td",[t._v("因为不能实例化，所以没有构造函数")]),t._v(" "),a("td",[t._v("可以有")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5.访问修饰符")]),t._v(" "),a("td",[t._v("只能是public或abstract")]),t._v(" "),a("td",[t._v("没有限制")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("6.实现")]),t._v(" "),a("td",[t._v("implement来实现接口中的方法")]),t._v(" "),a("td",[t._v("extends来实现接口中所有的抽象方法")])])])]),t._v(" "),a("h3",{attrs:{id:"_13、说一下堆、栈-队列、集合之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、说一下堆、栈-队列、集合之间的区别"}},[t._v("#")]),t._v(" 13、说一下堆、栈，队列、集合之间的区别？")]),t._v(" "),a("p",[t._v("堆")]),t._v(" "),a("p",[t._v("栈")]),t._v(" "),a("p",[t._v("队列")]),t._v(" "),a("p",[t._v("集合")]),t._v(" "),a("h3",{attrs:{id:"_14、对了解过上面这些的源码实现吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、对了解过上面这些的源码实现吗"}},[t._v("#")]),t._v(" 14、对了解过上面这些的源码实现吗？")]),t._v(" "),a("p",[t._v("没有")]),t._v(" "),a("h3",{attrs:{id:"_15、讲一下-hashmap-的源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、讲一下-hashmap-的源码"}},[t._v("#")]),t._v(" 15、讲一下 HashMap 的源码？")]),t._v(" "),a("p",[t._v("数组+链表 jdk1.7之前")]),t._v(" "),a("p",[t._v("1.存储，每次进行put时会计算key的hashcode，得到的哈希码会存放在数组中的某一个位置")]),t._v(" "),a("p",[t._v("2.相同的hashcode是hash冲突，hash冲突时会把需要存入的元素用链表进行连接")]),t._v(" "),a("p",[t._v("3.hashmap的默认大小是16，扩容因子是0.75，扩容条件hashmap中键值对个数大于16*0.75，也就是12，每次扩容为原来的2倍大小，")]),t._v(" "),a("p",[t._v('HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的 (n-1)&hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到"'),a("strong",[t._v("原位置+旧容量")]),t._v('"这个位置。')]),t._v(" "),a("p",[a("img",{attrs:{src:"E:%5Cvuepress-starter%5Cdocs%5C%E9%9D%A2%E8%AF%95%5C20230908.assets%5C20170123110716285.png",alt:"20170123110716285"}})]),t._v(" "),a("p",[t._v("jdk1.8：数组+链表+红黑树（当链表长度大于8且数组长度大于64时会转换成红黑树（平衡查询快），为了解决链表查询速度慢，提高查询效率")]),t._v(" "),a("h3",{attrs:{id:"_16、讲一下线程和进程的区别和联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、讲一下线程和进程的区别和联系"}},[t._v("#")]),t._v(" 16、讲一下线程和进程的区别和联系；")]),t._v(" "),a("h3",{attrs:{id:"_17、用过多线程吗-为什么项目要用到多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、用过多线程吗-为什么项目要用到多线程"}},[t._v("#")]),t._v(" 17、用过多线程吗？为什么项目要用到多线程？")]),t._v(" "),a("h3",{attrs:{id:"_18、使用什么方法能解决多线程的安全性问题呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、使用什么方法能解决多线程的安全性问题呢"}},[t._v("#")]),t._v(" 18、使用什么方法能解决多线程的安全性问题呢？")]),t._v(" "),a("h3",{attrs:{id:"_19、说一下-synchronized-的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、说一下-synchronized-的实现原理"}},[t._v("#")]),t._v(" 19、说一下 synchronized 的实现原理？")]),t._v(" "),a("h3",{attrs:{id:"_20、比较一下悲观锁和乐观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20、比较一下悲观锁和乐观锁"}},[t._v("#")]),t._v(" 20、比较一下悲观锁和乐观锁；")]),t._v(" "),a("h3",{attrs:{id:"_21、讲解一下-jvm-内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21、讲解一下-jvm-内存模型"}},[t._v("#")]),t._v(" 21、讲解一下 JVM 内存模型；")]),t._v(" "),a("h3",{attrs:{id:"_22、jvm-每个区具有什么功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22、jvm-每个区具有什么功能"}},[t._v("#")]),t._v(" 22、JVM 每个区具有什么功能？")]),t._v(" "),a("h3",{attrs:{id:"_23、讲解一下-jvm-的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23、讲解一下-jvm-的垃圾回收"}},[t._v("#")]),t._v(" 23、讲解一下 JVM 的垃圾回收；")]),t._v(" "),a("h3",{attrs:{id:"_24、jvm-垃圾回收器有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24、jvm-垃圾回收器有哪些"}},[t._v("#")]),t._v(" 24、JVM 垃圾回收器有哪些？")]),t._v(" "),a("h3",{attrs:{id:"_25、讲解一下-serial-和-cms-g1-回收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25、讲解一下-serial-和-cms-g1-回收器"}},[t._v("#")]),t._v(" 25、讲解一下 Serial 和 CMS，G1 回收器；")]),t._v(" "),a("h3",{attrs:{id:"_26、对-spring-的-ioc-和-aop-讲解一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26、对-spring-的-ioc-和-aop-讲解一下"}},[t._v("#")]),t._v(" 26、对 Spring 的 IOC 和 AOP 讲解一下；")]),t._v(" "),a("h3",{attrs:{id:"_27、springboot-的优点是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27、springboot-的优点是什么"}},[t._v("#")]),t._v(" 27、SpringBoot 的优点是什么？")]),t._v(" "),a("h3",{attrs:{id:"_28、对-mysql-进行过调优吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28、对-mysql-进行过调优吗"}},[t._v("#")]),t._v(" 28、对 MySQL 进行过调优吗？")]),t._v(" "),a("h3",{attrs:{id:"_29、讲一下数据库分库分表的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29、讲一下数据库分库分表的实现"}},[t._v("#")]),t._v(" 29、讲一下数据库分库分表的实现；")]),t._v(" "),a("h3",{attrs:{id:"_30、索引对数据库的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30、索引对数据库的作用是什么"}},[t._v("#")]),t._v(" 30、索引对数据库的作用是什么？")]),t._v(" "),a("h3",{attrs:{id:"_31、索引的数据结构是什么-什么是-b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31、索引的数据结构是什么-什么是-b-树"}},[t._v("#")]),t._v(" 31、索引的数据结构是什么？什么是 B+树？")]),t._v(" "),a("h3",{attrs:{id:"_32、mysql-如何保证事务的一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32、mysql-如何保证事务的一致性"}},[t._v("#")]),t._v(" 32、MySQL 如何保证事务的一致性？")]),t._v(" "),a("h3",{attrs:{id:"_33、redis-和-mysql-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33、redis-和-mysql-有什么区别"}},[t._v("#")]),t._v(" 33、Redis 和 MySql 有什么区别？")]),t._v(" "),a("h3",{attrs:{id:"_34、redis-的持久化机制是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34、redis-的持久化机制是如何实现的"}},[t._v("#")]),t._v(" 34、Redis 的持久化机制是如何实现的？")]),t._v(" "),a("h3",{attrs:{id:"_35、redis-如何保证缓存的一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35、redis-如何保证缓存的一致性"}},[t._v("#")]),t._v(" 35、Redis 如何保证缓存的一致性？")]),t._v(" "),a("h3",{attrs:{id:"_36、使用-rabbitmq-和延迟双删适用于什么场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36、使用-rabbitmq-和延迟双删适用于什么场景"}},[t._v("#")]),t._v(" 36、使用 RabbitMq 和延迟双删适用于什么场景？")]),t._v(" "),a("h3",{attrs:{id:"_37、对网络方面有了解吗-讲解一下-tcp-ip-协议的网络分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37、对网络方面有了解吗-讲解一下-tcp-ip-协议的网络分层"}},[t._v("#")]),t._v(" 37、对网络方面有了解吗？讲解一下 TCP/IP 协议的网络分层；")]),t._v(" "),a("h3",{attrs:{id:"_38、平时做项目遇到的问题时如何解决的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38、平时做项目遇到的问题时如何解决的"}},[t._v("#")]),t._v(" 38、平时做项目遇到的问题时如何解决的？")]),t._v(" "),a("h3",{attrs:{id:"_39、有没有考研的打算-为什么没有考研的打算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39、有没有考研的打算-为什么没有考研的打算"}},[t._v("#")]),t._v(" 39、有没有考研的打算，为什么没有考研的打算？")]),t._v(" "),a("h3",{attrs:{id:"_40、反问环节。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40、反问环节。"}},[t._v("#")]),t._v(" 40、反问环节。")])])}),[],!1,null,null,null);a.default=s.exports}}]);