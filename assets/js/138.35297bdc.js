(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{553:function(a,r,e){"use strict";e.r(r);var n=e(2),t=Object(n.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h3",{attrs:{id:"_1-配置类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置类"}},[a._v("#")]),a._v(" 1 配置类")]),a._v(" "),r("p",[a._v("主")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('package com.dataojo.huhehaotebasic.config.datasource;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\n\nimport javax.sql.DataSource;\n\n@Configuration\n@MapperScan(basePackages = {"com.dataojo.huhehaotebasic.mapper.master"}, sqlSessionFactoryRef = "masterSqlSessionFactory")\npublic class MasterDataSourceConfig {\n    static final String MAPPER_LOCATION = "classpath*:mybatis/master/*.xml";\n\n    @Value("${spring.datasource.master.url}")\n    private String url;\n\n    @Value("${spring.datasource.master.username}")\n    private String user;\n\n    @Value("${spring.datasource.master.password}")\n    private String password;\n\n    @Value("${spring.datasource.master.driver-class-name}")\n    private String driverClass;\n\n    @Primary\n    @Bean(name = "masterDataSource")\n    public DataSource masterDataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(driverClass);\n        dataSource.setUrl(url);\n        dataSource.setUsername(user);\n        dataSource.setPassword(password);\n        return dataSource;\n    }\n\n\n    @Bean(name = "masterSqlSessionFactory")\n    @Primary\n    public SqlSessionFactory masterSqlSessionFactory(@Qualifier("masterDataSource") DataSource masterDataSource) throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(masterDataSource);\n        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()\n                .getResources(MAPPER_LOCATION));\n        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();\n        configuration.setMapUnderscoreToCamelCase(true);\n        sessionFactory.setConfiguration(configuration);\n        return sessionFactory.getObject();\n    }\n\n    @Bean(name = "masterTransactionManager")\n    @Primary\n    public DataSourceTransactionManager masterTransactionManager() {\n        return new DataSourceTransactionManager(masterDataSource());\n    }\n}\n')])])]),r("p",[a._v("从")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('package com.dataojo.huhehaotebasic.config.datasource;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.jdbc.datasource.DataSourceTransactionManager;\n\nimport javax.sql.DataSource;\n\n@Configuration\n@MapperScan(basePackages = {"com.dataojo.huhehaotebasic.mapper.cluster"}, sqlSessionFactoryRef = "clusterSqlSessionFactory")\npublic class ClusterDataSourceConfig {\n\n    static final String MAPPER_LOCATION = "classpath*:mybatis/cluster/*.xml";\n\n    @Value("${spring.datasource.cluster.url}")\n    private String url;\n\n    @Value("${spring.datasource.cluster.username}")\n    private String user;\n\n    @Value("${spring.datasource.cluster.password}")\n    private String password;\n\n    @Value("${spring.datasource.cluster.driver-class-name}")\n    private String driverClass;\n\n    @Bean(name = "clusterDataSource")\n    public DataSource clusterDataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(driverClass);\n        dataSource.setUrl(url);\n        dataSource.setUsername(user);\n        dataSource.setPassword(password);\n        return dataSource;\n    }\n\n\n    @Bean(name = "clusterSqlSessionFactory")\n    public SqlSessionFactory clusterSqlSessionFactory(@Qualifier("clusterDataSource") DataSource clusterDataSource)\n            throws Exception {\n        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();\n        sessionFactory.setDataSource(clusterDataSource);\n        sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()\n                .getResources(MAPPER_LOCATION));\n        return sessionFactory.getObject();\n    }\n\n    @Bean(name = "clusterTransactionManager")\n    public DataSourceTransactionManager clusterTransactionManager() {\n        return new DataSourceTransactionManager(clusterDataSource());\n    }\n}\n')])])]),r("h3",{attrs:{id:"_2-配置信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置信息"}},[a._v("#")]),a._v(" 2 配置信息")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("spring:\n  datasource:\n    master:\n      url: jdbc:mysql://localhost:3306/xxx?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: root\n      password: root\n      type: com.alibaba.druid.pool.DruidDataSource\n      druid:\n        # 初始化大小，最小，最大\n        initial-size: 5\n        min-idle: 5\n        max-active: 20\n        # 配置获取连接等待超时的时间\n        max-wait: 60000\n        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\n        time-between-eviction-runs-millis: 60000\n        # 配置一个连接在池中最小生存的时间，单位是毫秒\n        min-evictable-idle-time-millis: 300000\n        # 测试连接\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n    cluster:\n      url: jdbc:sqlserver://localhost;DatabaseName=xxx\n      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver\n      username: root\n      password: root\n")])])]),r("h3",{attrs:{id:"_3-maven依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-maven依赖"}},[a._v("#")]),a._v(" 3 maven依赖")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("        <dependency>\n            <groupId>com.microsoft.sqlserver</groupId>\n            <artifactId>mssql-jdbc</artifactId>\n            <version>${sql-server.version}</version>\n        </dependency>\n        还有MySQL的、mybatis等省略\n")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);