(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{439:function(e,n,t){"use strict";t.r(n);var a=t(2),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[e._v("#")]),e._v(" 依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        \x3c!--验证码 --\x3e\n        <dependency>\n            <groupId>pro.fessional</groupId>\n            <artifactId>kaptcha</artifactId>\n        </dependency>\n        \n       <kaptcha.version>2.3.3</kaptcha.version>\n\n")])])]),n("h2",{attrs:{id:"handler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#handler"}},[e._v("#")]),e._v(" handler")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component\npublic class ValidateCodeHandler implements HandlerFunction<ServerResponse>\n{\n    @Autowired\n    private ValidateCodeService validateCodeService;\n\n    @Override\n    public Mono<ServerResponse> handle(ServerRequest serverRequest)\n    {\n        AjaxResult ajax;\n        try\n        {\n            ajax = validateCodeService.createCaptcha();\n        }\n        catch (CaptchaException | IOException e)\n        {\n            return Mono.error(e);\n        }\n        return ServerResponse.status(HttpStatus.OK).body(BodyInserters.fromValue(ajax));\n    }\n}\n\n")])])]),n("h2",{attrs:{id:"service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[e._v("#")]),e._v(" service")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface ValidateCodeService\n{\n    /**\n     * 生成验证码\n     */\n    public AjaxResult createCaptcha() throws IOException, CaptchaException;\n\n    /**\n     * 校验验证码\n     */\n    public void checkCaptcha(String key, String value) throws CaptchaException;\n}\n\n")])])]),n("h2",{attrs:{id:"实现类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现类"}},[e._v("#")]),e._v(" 实现类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class ValidateCodeServiceImpl implements ValidateCodeService\n{\n    /**\n     * 注入验证码生成器\n     */\n    @Resource(name = "captchaProducer")\n    private Producer captchaProducer;\n\n    @Resource(name = "captchaProducerMath")\n    private Producer captchaProducerMath;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Autowired\n    private CaptchaProperties captchaProperties;\n\n    /**\n     * 生成验证码\n     */\n    @Override\n    public AjaxResult createCaptcha() throws IOException, CaptchaException\n    {\n        //判断验证码是否启用\n        AjaxResult ajax = AjaxResult.success();\n        boolean captchaEnabled = captchaProperties.getEnabled();\n        ajax.put("captchaEnabled", captchaEnabled);\n        if (!captchaEnabled)\n        {\n            return ajax;\n        }\n\n        // 保存验证码信息\n        String uuid = IdUtils.simpleUUID();\n        String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;\n\n        String capStr = null, code = null;\n        BufferedImage image = null;\n\n        String captchaType = captchaProperties.getType();\n        // 生成验证码和验证码图片\n        if ("math".equals(captchaType))\n        {\n            String capText = captchaProducerMath.createText();\n            capStr = capText.substring(0, capText.lastIndexOf("@"));\n            code = capText.substring(capText.lastIndexOf("@") + 1);\n            image = captchaProducerMath.createImage(capStr);\n        }\n        else if ("char".equals(captchaType))\n        {\n            capStr = code = captchaProducer.createText();\n            image = captchaProducer.createImage(capStr);\n        }\n\n        redisService.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try\n        {\n            ImageIO.write(image, "jpg", os);\n        }\n        catch (IOException e)\n        {\n            return AjaxResult.error(e.getMessage());\n        }\n\n        ajax.put("uuid", uuid);\n        ajax.put("img", Base64.encode(os.toByteArray()));\n        return ajax;\n    }\n\n    /**\n     * 校验验证码\n     */\n    @Override\n    public void checkCaptcha(String code, String uuid) throws CaptchaException\n    {\n        if (StringUtils.isEmpty(code))\n        {\n            throw new CaptchaException("验证码不能为空");\n        }\n        if (StringUtils.isEmpty(uuid))\n        {\n            throw new CaptchaException("验证码已失效");\n        }\n        String verifyKey = CacheConstants.CAPTCHA_CODE_KEY + uuid;\n        String captcha = redisService.getCacheObject(verifyKey);\n        redisService.deleteObject(verifyKey);\n\n        if (!code.equalsIgnoreCase(captcha))\n        {\n            throw new CaptchaException("验证码错误");\n        }\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"验证码生成器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证码生成器"}},[e._v("#")]),e._v(" 验证码生成器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Configuration\npublic class CaptchaConfig\n{\n    @Bean(name = "captchaProducer")\n    public DefaultKaptcha getKaptchaBean()\n    {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, "yes");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, "black");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, "160");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, "60");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, "38");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, "kaptchaCode");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, "4");\n        // 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, "Arial,Courier");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, "com.google.code.kaptcha.impl.ShadowGimpy");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n    \n    @Bean(name = "captchaProducerMath")\n    public DefaultKaptcha getKaptchaBeanMath()\n    {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, "yes");\n        // 边框颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_BORDER_COLOR, "105,179,90");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, "blue");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, "160");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, "60");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, "35");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, "kaptchaCodeMath");\n        // 验证码文本生成器\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, "com.ruoyi.gateway.config.KaptchaTextCreator");\n        // 验证码文本字符间距 默认为2\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, "3");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, "6");\n        // 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, "Arial,Courier");\n        // 验证码噪点颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_NOISE_COLOR, "white");\n        // 干扰实现类\n        properties.setProperty(KAPTCHA_NOISE_IMPL, "com.google.code.kaptcha.impl.NoNoise");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, "com.google.code.kaptcha.impl.ShadowGimpy");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n}\n')])])]),n("h2",{attrs:{id:"验证码文本生成器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证码文本生成器"}},[e._v("#")]),e._v(" 验证码文本生成器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * 验证码文本生成器\n */\npublic class KaptchaTextCreator extends DefaultTextCreator\n{\n    private static final String[] CNUMBERS = "0,1,2,3,4,5,6,7,8,9,10".split(",");\n\n    @Override\n\n\n    public String getText()\n    {\n\n        Integer result = 0;\n        Random random = new Random();\n        int x = random.nextInt(10);\n        int y = random.nextInt(10);\n        StringBuilder suChinese = new StringBuilder();\n        int randomoperands = random.nextInt(3);\n        if (randomoperands == 0)\n        {\n            result = x * y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append("*");\n            suChinese.append(CNUMBERS[y]);\n        }\n        else if (randomoperands == 1)\n        {\n            if ((x != 0) && y % x == 0)\n            {\n                result = y / x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append("/");\n                suChinese.append(CNUMBERS[x]);\n            }\n            else\n            {\n                result = x + y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append("+");\n                suChinese.append(CNUMBERS[y]);\n            }\n        }\n        else if (randomoperands == 2)\n        {\n            if (x >= y)\n            {\n                result = x - y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append("-");\n                suChinese.append(CNUMBERS[y]);\n            }\n            else\n            {\n                result = y - x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append("-");\n                suChinese.append(CNUMBERS[x]);\n            }\n        }\n        else\n        {\n            result = x + y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append("+");\n            suChinese.append(CNUMBERS[y]);\n        }\n        suChinese.append("=?@" + result);\n        return suChinese.toString();\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"验证码过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证码过滤器"}},[e._v("#")]),e._v(" 验证码过滤器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * 验证码过滤器\n */\n@Component\npublic class ValidateCodeFilter extends AbstractGatewayFilterFactory<Object>\n{\n    private final static String[] VALIDATE_URL = new String[] { "/auth/login", "/auth/register" };\n\n    @Autowired\n    private ValidateCodeService validateCodeService;\n\n    @Autowired\n    private CaptchaProperties captchaProperties;\n\n    private static final String CODE = "code";\n\n    private static final String UUID = "uuid";\n\n    @Override\n    public GatewayFilter apply(Object config)\n    {\n        return (exchange, chain) -> {\n            ServerHttpRequest request = exchange.getRequest();\n\n            // 非登录/注册请求或验证码关闭，不处理\n            if (!StringUtils.containsAnyIgnoreCase(request.getURI().getPath(), VALIDATE_URL) || !captchaProperties.getEnabled())\n            {\n                return chain.filter(exchange);\n            }\n\n            try\n            {\n                String rspStr = resolveBodyFromRequest(request);\n                JSONObject obj = JSON.parseObject(rspStr);\n                validateCodeService.checkCaptcha(obj.getString(CODE), obj.getString(UUID));\n            }\n            catch (Exception e)\n            {\n                return ServletUtils.webFluxResponseWriter(exchange.getResponse(), e.getMessage());\n            }\n            return chain.filter(exchange);\n        };\n    }\n\n    private String resolveBodyFromRequest(ServerHttpRequest serverHttpRequest)\n    {\n        // 获取请求体\n        Flux<DataBuffer> body = serverHttpRequest.getBody();\n        AtomicReference<String> bodyRef = new AtomicReference<>();\n        body.subscribe(buffer -> {\n            CharBuffer charBuffer = StandardCharsets.UTF_8.decode(buffer.asByteBuffer());\n            DataBufferUtils.release(buffer);\n            bodyRef.set(charBuffer.toString());\n        });\n        return bodyRef.get();\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"验证码配置类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证码配置类"}},[e._v("#")]),e._v(" 验证码配置类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * 验证码配置\n */\n@Configuration\n@RefreshScope\n@ConfigurationProperties(prefix = "security.captcha")\npublic class CaptchaProperties\n{\n    /**\n     * 验证码开关\n     */\n    private Boolean enabled;\n\n    /**\n     * 验证码类型（math 数组计算 char 字符）\n     */\n    private String type;\n\n    public Boolean getEnabled()\n    {\n        return enabled;\n    }\n\n    public void setEnabled(Boolean enabled)\n    {\n        this.enabled = enabled;\n    }\n\n    public String getType()\n    {\n        return type;\n    }\n\n    public void setType(String type)\n    {\n        this.type = type;\n    }\n}\n')])])]),n("h2",{attrs:{id:"yaml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yaml"}},[e._v("#")]),e._v(" yaml")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 安全配置\nsecurity:\n  # 验证码\n  captcha:\n  \t#开启验证码\n    enabled: true\n    #匹配模式\n    type: math\n")])])]),n("h2",{attrs:{id:"返回封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#返回封装"}},[e._v("#")]),e._v(" 返回封装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * 操作消息提醒\n */\npublic class AjaxResult extends HashMap<String, Object>\n{\n    private static final long serialVersionUID = 1L;\n\n    /** 状态码 */\n    public static final String CODE_TAG = "code";\n\n    /** 返回内容 */\n    public static final String MSG_TAG = "msg";\n\n    /** 数据对象 */\n    public static final String DATA_TAG = "data";\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。\n     */\n    public AjaxResult()\n    {\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     * \n     * @param code 状态码\n     * @param msg 返回内容\n     */\n    public AjaxResult(int code, String msg)\n    {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     * \n     * @param code 状态码\n     * @param msg 返回内容\n     * @param data 数据对象\n     */\n    public AjaxResult(int code, String msg, Object data)\n    {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n        if (StringUtils.isNotNull(data))\n        {\n            super.put(DATA_TAG, data);\n        }\n    }\n\n    /**\n     * 返回成功消息\n     * \n     * @return 成功消息\n     */\n    public static AjaxResult success()\n    {\n        return AjaxResult.success("操作成功");\n    }\n\n    /**\n     * 返回成功数据\n     * \n     * @return 成功消息\n     */\n    public static AjaxResult success(Object data)\n    {\n        return AjaxResult.success("操作成功", data);\n    }\n\n    /**\n     * 返回成功消息\n     * \n     * @param msg 返回内容\n     * @return 成功消息\n     */\n    public static AjaxResult success(String msg)\n    {\n        return AjaxResult.success(msg, null);\n    }\n\n    /**\n     * 返回成功消息\n     * \n     * @param msg 返回内容\n     * @param data 数据对象\n     * @return 成功消息\n     */\n    public static AjaxResult success(String msg, Object data)\n    {\n        return new AjaxResult(HttpStatus.SUCCESS, msg, data);\n    }\n\n    /**\n     * 返回警告消息\n     *\n     * @param msg 返回内容\n     * @return 警告消息\n     */\n    public static AjaxResult warn(String msg)\n    {\n        return AjaxResult.warn(msg, null);\n    }\n\n    /**\n     * 返回警告消息\n     *\n     * @param msg 返回内容\n     * @param data 数据对象\n     * @return 警告消息\n     */\n    public static AjaxResult warn(String msg, Object data)\n    {\n        return new AjaxResult(HttpStatus.WARN, msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     * \n     * @return 错误消息\n     */\n    public static AjaxResult error()\n    {\n        return AjaxResult.error("操作失败");\n    }\n\n    /**\n     * 返回错误消息\n     * \n     * @param msg 返回内容\n     * @return 错误消息\n     */\n    public static AjaxResult error(String msg)\n    {\n        return AjaxResult.error(msg, null);\n    }\n\n    /**\n     * 返回错误消息\n     * \n     * @param msg 返回内容\n     * @param data 数据对象\n     * @return 错误消息\n     */\n    public static AjaxResult error(String msg, Object data)\n    {\n        return new AjaxResult(HttpStatus.ERROR, msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     * \n     * @param code 状态码\n     * @param msg 返回内容\n     * @return 错误消息\n     */\n    public static AjaxResult error(int code, String msg)\n    {\n        return new AjaxResult(code, msg, null);\n    }\n\n    /**\n     * 是否为成功消息\n     *\n     * @return 结果\n     */\n    public boolean isSuccess()\n    {\n        return Objects.equals(HttpStatus.SUCCESS, this.get(CODE_TAG));\n    }\n\n    /**\n     * 是否为警告消息\n     *\n     * @return 结果\n     */\n    public boolean isWarn()\n    {\n        return Objects.equals(HttpStatus.WARN, this.get(CODE_TAG));\n    }\n\n    /**\n     * 是否为错误消息\n     *\n     * @return 结果\n     */\n    public boolean isError()\n    {\n        return Objects.equals(HttpStatus.ERROR, this.get(CODE_TAG));\n    }\n\n    /**\n     * 方便链式调用\n     *\n     * @param key\n     * @param value\n     * @return\n     */\n    @Override\n    public AjaxResult put(String key, Object value)\n    {\n        super.put(key, value);\n        return this;\n    }\n}\n\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);