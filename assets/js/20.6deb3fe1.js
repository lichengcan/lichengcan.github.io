(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{437:function(n,t,r){"use strict";r.r(t);var a=r(2),e=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"md5工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#md5工具类"}},[this._v("#")]),this._v(" MD5工具类")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('package com.dataojo.huhehaotebasic.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.security.MessageDigest;\n\n@Slf4j\npublic class MD5Utils {\n\n\n    /***\n     * MD5加码 生成32位md5码\n     */\n    public static String string2MD5(String inStr) {\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance("MD5");\n        } catch (Exception e) {\n            log.info(e.toString());\n            e.printStackTrace();\n            return "";\n        }\n        char[] charArray = inStr.toCharArray();\n        byte[] byteArray = new byte[charArray.length];\n\n        for (int i = 0; i < charArray.length; i++)\n            byteArray[i] = (byte) charArray[i];\n        byte[] md5Bytes = md5.digest(byteArray);\n        StringBuffer hexValue = new StringBuffer();\n        for (int i = 0; i < md5Bytes.length; i++) {\n            int val = ((int) md5Bytes[i]) & 0xff;\n            if (val < 16)\n                hexValue.append("0");\n            hexValue.append(Integer.toHexString(val));\n        }\n        return hexValue.toString();\n\n    }\n\n    /**\n     * 加密解密算法 执行一次加密，两次解密\n     */\n    public static String convertMD5(String inStr) {\n\n        char[] a = inStr.toCharArray();\n        for (int i = 0; i < a.length; i++) {\n            a[i] = (char) (a[i] ^ \'t\');\n        }\n        String s = new String(a);\n        return s;\n\n    }\n\n    /**\n     * 判断输入的密码和数据库中保存的MD5密码是否一致\n     * @param inputPassword 输入的密码\n     * @param md5DB 数据库保存的密码\n     * @return\n     */\n    public static boolean passwordIsTrue(String inputPassword,String md5DB) {\n\n       String md5 = string2MD5(inputPassword);\n       return md5DB.equals(md5);\n    }\n\n\n    // 测试主函数\n    public static void main(String args[]) {\n        String s = new String("123456");\n        log.info("原始：" + s);\n        log.info("MD5后：" + string2MD5(s));\n        log.info("密码是否一致：" + passwordIsTrue("123456","e10adc3949ba59abbe56e057f20f883e"));\n\n    }\n\n}\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);