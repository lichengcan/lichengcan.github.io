(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{563:function(e,n,t){"use strict";t.r(n);var r=t(2),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"redis-lock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-lock"}},[e._v("#")]),e._v(" redis-lock")]),e._v(" "),n("h2",{attrs:{id:"使用互斥锁-解决redis缓存击穿问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用互斥锁-解决redis缓存击穿问题"}},[e._v("#")]),e._v(" 使用互斥锁-解决redis缓存击穿问题")]),e._v(" "),n("h3",{attrs:{id:"_1-controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-controller"}},[e._v("#")]),e._v(" 1 controller")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/**\n * @author lcc\n * @date 2023/09/08\n */\n@RestController\n@RequestMapping("/city")\npublic class CityController {\n\n   private final CityService cityService;\n\n   @Autowired\n   public CityController(CityService cityService) {\n      this.cityService = cityService;\n   }\n\n   @GetMapping("/{id}")\n   public Object getCity(@PathVariable("id") String cityCode) {\n      return cityService.getByCode(cityCode);\n   }\n}\n')])])]),n("h3",{attrs:{id:"_2-service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-service"}},[e._v("#")]),e._v(" 2 service")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.example.redis.service.impl;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.example.redis.constants.RedisConstants;\nimport com.example.redis.domain.City;\nimport com.example.redis.mapper.CityMapper;\nimport com.example.redis.service.CityService;\nimport org.apache.commons.lang.BooleanUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.stereotype.Service;\n\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * @author lcc\n * @date 2023/09/08\n */\n@Service\n@Slf4j\npublic class CityServiceImpl extends ServiceImpl<CityMapper, City> implements CityService {\n\n    private StringRedisTemplate stringRedisTemplate;\n    private CityMapper cityMapper;\n\n    @Autowired\n    public CityServiceImpl(StringRedisTemplate stringRedisTemplate,\n                           CityMapper cityMapper){\n        this.stringRedisTemplate = stringRedisTemplate;\n        this.cityMapper = cityMapper;\n    }\n\n    @Override\n    public City getByCode(String cityCode) {\n        String key = RedisConstants.CACHE_CITY_KEY+cityCode;\n        return queryCityWithMutex(key, cityCode);\n    }\n\n    /**\n     * 通过互斥锁机制查询城市信息\n     * @param key\n     */\n    private City queryCityWithMutex(String key, String cityCode) {\n        City city = null;\n        // 1.查询缓存\n        String cityJson = stringRedisTemplate.opsForValue().get(key);\n        // 2.判断缓存是否有数据\n        if (StringUtils.isNotBlank(cityJson)) {\n            // 3.有,则返回\n            city = JSONObject.parseObject(cityJson, City.class);\n            return city;\n        }\n        // 4.无,则获取互斥锁\n        String lockKey = RedisConstants.LOCK_CITY_KEY + cityCode;\n        Boolean isLock = tryLock(lockKey);\n        // 5.判断获取锁是否成功\n        try {\n            if (!isLock) {\n                // 6.获取失败, 休眠并重试\n                Thread.sleep(100);\n                return queryCityWithMutex(key, cityCode);\n            }\n            // 7.获取成功, 查询数据库\n            city = baseMapper.selectById(cityCode);\n            // 8.判断数据库是否有数据\n            if (city == null) {\n                // 9.无,则将空数据写入redis\n                stringRedisTemplate.opsForValue().set(key, "", RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES);\n                return null;\n            }\n            // 10.有,则将数据写入redis\n            stringRedisTemplate.opsForValue().set(key, JSONObject.toJSONString(city), RedisConstants.CACHE_CITY_TTL, TimeUnit.MINUTES);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            // 11.释放锁\n            unLock(lockKey);\n        }\n        // 12.返回数据\n        return city;\n    }\n\n    /**\n     * 获取互斥锁\n     * @return\n     */\n    private Boolean tryLock(String key) {\n        //如果key不存在则进行存储，当存在时，则代表当前互斥锁被其他线程获取了\n        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, "1", 10, TimeUnit.SECONDS);\n        return BooleanUtils.isTrue(flag);\n    }\n\n    /**\n     * 释放锁\n     * @param key\n     */\n    private void unLock(String key) {\n        stringRedisTemplate.delete(key);\n    }\n\n}\n\n')])])]),n("h3",{attrs:{id:"_3-entity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-entity"}},[e._v("#")]),e._v(" 3 entity")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.example.redis.domain;\n\nimport lombok.Data;\n\n@Data\npublic class City {\n    private Integer id;\n\n    private String name;\n}\n\n")])])]),n("h3",{attrs:{id:"_4-mapper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-mapper"}},[e._v("#")]),e._v(" 4 mapper")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.example.redis.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.example.redis.domain.City;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface CityMapper extends BaseMapper<City> {\n\n}\n\n")])])]),n("h3",{attrs:{id:"_5-依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-依赖"}},[e._v("#")]),e._v(" 5 依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.6</version>\n        <relativePath/> \x3c!-- lookup parent from repository --\x3e\n    </parent>\n    <groupId>com.example</groupId>\n    <artifactId>redis</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>redis</name>\n    <description>redis</description>\n    <properties>\n        <java.version>8</java.version>\n    </properties>\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-rest</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.5.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.27</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        \x3c!-- mybatis-plus --\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n\n        \x3c!-- lettuce pool 缓存连接池--\x3e\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.6</version>\n        </dependency>\n        \x3c!--处理JSON格式--\x3e\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        \x3c!--hutool--\x3e\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>5.7.17</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.20</version>\n        </dependency>\n    </dependencies>\n\n</project>\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);