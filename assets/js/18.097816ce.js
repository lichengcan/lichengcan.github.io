(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{436:function(a,e,t){"use strict";t.r(e);var n=t(2),s=Object(n.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"java程序是如何运行的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java程序是如何运行的"}},[a._v("#")]),a._v(" Java程序是如何运行的？")]),a._v(" "),e("h1",{attrs:{id:"java-反射机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-反射机制"}},[a._v("#")]),a._v(" Java-反射机制")]),a._v(" "),e("h4",{attrs:{id:"_1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[a._v("#")]),a._v(" 1 定义")]),a._v(" "),e("blockquote",[e("p",[a._v("在程序运行时动态的获取类的信息，包括但不限于类的属性、方法、构造函数等")]),a._v(" "),e("p",[a._v("且能操作类的成员和调用方法")])]),a._v(" "),e("h4",{attrs:{id:"_2-核心类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-核心类"}},[a._v("#")]),a._v(" 2 核心类")]),a._v(" "),e("h5",{attrs:{id:"class-运行时可以获取类、接口的信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-运行时可以获取类、接口的信息"}},[a._v("#")]),a._v(" Class 运行时可以获取类、接口的信息")]),a._v(" "),e("h5",{attrs:{id:"constructor-类的构造函数-用来创建类的实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructor-类的构造函数-用来创建类的实例"}},[a._v("#")]),a._v(" Constructor 类的构造函数，用来创建类的实例")]),a._v(" "),e("h5",{attrs:{id:"method-来调用类的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#method-来调用类的方法"}},[a._v("#")]),a._v(" Method 来调用类的方法")]),a._v(" "),e("h5",{attrs:{id:"field-读取或修改类的字段值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#field-读取或修改类的字段值"}},[a._v("#")]),a._v(" Field 读取或修改类的字段值")]),a._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('动态实例化对象\nClass&lt;?> clazz = MyClass.class;\nObject instance = clazz.newInstance();\n调用类的静态方法\nMethod method = clazz.getMethod("staticMethod", int.class);\nmethod.invoke(null, 10);\n获取类的字段值\nField field = clazz.getDeclaredField("fieldName");\nfield.setAccessible(true);\nObject value = field.get(instance);\n')])])]),e("h4",{attrs:{id:"_3-具体的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-具体的使用"}},[a._v("#")]),a._v(" 3 具体的使用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('package com.example.reflection.handler;\n\nimport com.example.reflection.service.MyClass;\nimport com.example.reflection.service.impl.MyClassImpl;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\nclass MyInvocationHandler implements InvocationHandler {\n\n    private MyClass myClass;\n\n    public MyInvocationHandler(MyClass myClass) {\n        this.myClass = myClass;\n    }\n\n    public MyInvocationHandler() {\n\n    }\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        // 在代理对象上调用方法前的操作\n        System.out.println("在代理对象上调用方法前的操作========");\n        Object result = method.invoke(myClass, args);\n        System.out.println("在代理对象上调用方法前的操作========");\n        // 在代理对象上调用方法后的操作\n        return result;\n    }\n\n    public static void main(String[] args) throws ClassNotFoundException {\n        //实际被代理的对象\n         MyClass myClass1 = new MyClassImpl();\n        //拦截器\n        MyInvocationHandler myInvocationHandler = new MyInvocationHandler(myClass1);\n        //获取类信息\n        Class<?> aClass = Class.forName("com.example.reflection.service.MyClass");\n        //进行动态代理 获取类的实例(类加载器，实际被代理的类对象，拦截器)\n        MyClass instance = (MyClass) Proxy.newProxyInstance(aClass.getClassLoader(), new Class[]{aClass}, myInvocationHandler);\n        instance.test("海王唐智科", 38);\n    }\n}\n\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("package com.example.reflection.service;\n\n/**\n * @author lichengcan\n */\npublic interface MyClass {\n\n\n    void test(String name,Integer age);\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('package com.example.reflection.service.impl;\n\nimport com.example.reflection.service.MyClass;\n\n/**\n * @author: lichengcan\n * @date: 2023-07-09 09:47\n * @description\n **/\npublic class MyClassImpl implements MyClass {\n    @Override\n    public void test(String name, Integer age) {\n        System.out.println("我叫 ： " + name+"，今年"+age+"岁。");\n    }\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);