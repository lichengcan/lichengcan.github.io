(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{492:function(a,t,s){"use strict";s.r(t);var e=s(2),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[a._v("#")]),a._v(" 集合")]),a._v(" "),t("h3",{attrs:{id:"一、普通集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、普通集合"}},[a._v("#")]),a._v(" 一、普通集合")]),a._v(" "),t("h4",{attrs:{id:"_1-有序、可重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-有序、可重复"}},[a._v("#")]),a._v(" 1.有序、可重复")]),a._v(" "),t("h5",{attrs:{id:"_1-arraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-arraylist"}},[a._v("#")]),a._v(" 1.arraylist")]),a._v(" "),t("h5",{attrs:{id:"_2-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-queue"}},[a._v("#")]),a._v(" 2.queue")]),a._v(" "),t("h5",{attrs:{id:"_3-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-vector"}},[a._v("#")]),a._v(" 3.vector")]),a._v(" "),t("h4",{attrs:{id:"_2-无序、不可重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-无序、不可重复"}},[a._v("#")]),a._v(" 2.无序、不可重复")]),a._v(" "),t("h5",{attrs:{id:"set-hashset、treeset、linkedhashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-hashset、treeset、linkedhashset"}},[a._v("#")]),a._v(" Set：HashSet、TreeSet、LinkedHashSet")]),a._v(" "),t("h4",{attrs:{id:"_3-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-map"}},[a._v("#")]),a._v(" 3.map")]),a._v(" "),t("h5",{attrs:{id:"map-hashmap、treemap、linkedhashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-hashmap、treemap、linkedhashmap"}},[a._v("#")]),a._v(" Map:HashMap、TreeMap、LinkedHashMap")]),a._v(" "),t("p",[a._v("数组+链表+红黑树")]),a._v(" "),t("p",[a._v("put插入数据：计算hash值，根据数组大小进行取模，得到在数组中的位置，放入数组时判断数组位置是否为空，空就直接放，不为空则为hash冲突，插入到链表、判断插入后链表长度是否大于8，如果大于就进行树化，如果本来就是红黑树了，就直接插入到红黑树中，为什么这里是8？")]),a._v(" "),t("p",[a._v("1.红黑树的查找长度是log（n），链表是n/2，如果长度大于8时，log8=3，8/2=4，红黑树的查找速度明显大于链表")]),a._v(" "),t("p",[a._v("2.因为hashmap使用hashcode进行散列存储、当散列的比较好的时候，松散分布，每个链表长度大于8 的可能性很小很小很小")]),a._v(" "),t("p",[a._v("扩容机制：位运算")]),a._v(" "),t("p",[a._v("CAS：预期值和内存当前位置的值进行比较，相同则update，不同则不做修改，继续while，是一种乐观锁机制")]),a._v(" "),t("h3",{attrs:{id:"二、线程安全集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、线程安全集合"}},[a._v("#")]),a._v(" 二、线程安全集合")])])}),[],!1,null,null,null);t.default=r.exports}}]);