(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{538:function(e,t,n){"use strict";n.r(t);var a=n(2),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("转载：https://www.iocoder.cn/ActiveMQ/install/")])]),e._v(" "),t("h1",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[e._v("#")]),e._v(" 1. 概述")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/apache/activemq",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQ"),t("OutboundLink")],1),e._v(" 是 "),t("a",{attrs:{href:"https://baike.baidu.com/item/Apache%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A",target:"_blank",rel:"noopener noreferrer"}},[e._v("Apache 软件基金会所"),t("OutboundLink")],1),e._v("研发的开源的消息中间件。")]),e._v(" "),t("ul",[t("li",[e._v("ActiveMQ 是基于 Java 语言来进行实现的，因此只需要有 Java 环境，ActiveMQ 就可以方便的运行起来。")]),e._v(" "),t("li",[e._v("ActiveMQ 完全支持 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Java_Message_Service",target:"_blank",rel:"noopener noreferrer"}},[e._v("JMS1.1"),t("OutboundLink")],1),e._v(" 规范。")])]),e._v(" "),t("p",[e._v("不过 ActiveMQ 相比目前主流的 RabbitMQ、Kafka、RocketMQ 等消息队列来说，性能是相对比较差的，所以目前互联网公司采用的非常少。也因此，在 "),t("a",{attrs:{href:"https://activemq.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQ 官方"),t("OutboundLink")],1),e._v(" 可以看到，其正在积极开发 "),t("a",{attrs:{href:"https://github.com/apache/activemq-artemis",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQ Artemis"),t("OutboundLink")],1),e._v(" ，以最终替代现有的 ActiveMQ 版本。")]),e._v(" "),t("blockquote",[t("p",[e._v("Artemis 是一款基于 Netty NIO 的高性能消息中间件，它的前身为 JBoss 的 "),t("a",{attrs:{href:"https://hornetq.jboss.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HornetQ"),t("OutboundLink")],1),e._v("，于 2015 年被捐献给 Apache ActiveMQ 社区，并命名为 Apache Artemis。")])]),e._v(" "),t("p",[e._v("因为朋友已经写了一篇很不错的 ActiveMQ 入门文章，所以艿艿就可以光明正大的偷懒了。对 RabbitMQ 不了解的胖友，可以先阅读 "),t("a",{attrs:{href:"http://www.iocoder.cn/ActiveMQ/yuliu/doc",target:"_blank",rel:"noopener noreferrer"}},[e._v("《消息队列之 ActiveMQ》"),t("OutboundLink")],1),e._v(" 文章的"),t("a",{attrs:{href:"https://www.iocoder.cn/ActiveMQ/install/#",target:"_blank",rel:"noopener noreferrer"}},[e._v("「1. 简介」"),t("OutboundLink")],1),e._v("小节")]),e._v(" "),t("h1",{attrs:{id:"_2-单机部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-单机部署"}},[e._v("#")]),e._v(" 2. 单机部署")]),e._v(" "),t("blockquote",[t("p",[e._v("操作系统：macOS 10.14")]),e._v(" "),t("p",[e._v("其它系统，基本一致的。")])]),e._v(" "),t("p",[e._v("注意，需要安装 JDK 。不同版本的 ActiveMQ 需要的 JDK 版本，见"),t("a",{attrs:{href:"https://blog.csdn.net/yanfeipei/article/details/75267384",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Apache ActiveMQ 各个版本所依赖的 JDK 版本》"),t("OutboundLink")],1),e._v("文章。")]),e._v(" "),t("h2",{attrs:{id:"_2-1-下载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-下载"}},[e._v("#")]),e._v(" 2.1 下载")]),e._v(" "),t("p",[e._v("打开 "),t("a",{attrs:{href:"http://activemq.apache.org/download-archives.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQ 下载页面"),t("OutboundLink")],1),e._v("，选择想要的 ActiveMQ 版本。这里，选择版本 "),t("a",{attrs:{href:"http://activemq.apache.org/activemq-51510-release",target:"_blank",rel:"noopener noreferrer"}},[e._v("5.15.10 Release"),t("OutboundLink")],1),e._v(" 。命令行操作如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("在/opt目录下解压\n# 解压\n$ tar -zxvf apache-activemq-5.15.10-bin.tar.gz\n# 重命名\n$ mv apache-activemq-5.15.10 activemq\n\n# 查看目录\n$ ls- ls\n80 -rw-r--r--   1 yunai  staff     40580 Aug 28 15:47 LICENSE\n8 -rw-r--r--   1 yunai  staff      3334 Aug 28 15:47 NOTICE\n8 -rw-r--r--   1 yunai  staff      2610 Aug 28 15:47 README.txt\n36208 -rwxr-xr-x   1 yunai  staff  18536370 Aug 28 15:22 activemq-all-5.15.10.jar\n0 drwxr-xr-x  10 yunai  staff       320 Dec 14 20:30 bin # # 执行脚本\n0 drwxr-xr-x  20 yunai  staff       640 Aug 28 15:47 conf # 配置文件\n0 drwxr-xr-x   3 yunai  staff        96 Aug 28 15:47 data # 数据文件、日志文件\n0 drwxr-xr-x   5 yunai  staff       160 Aug 28 15:47 docs # 文档\n0 drwxr-xr-x   7 yunai  staff       224 Aug 28 15:47 examples # 使用示例\n0 drwxr-xr-x  22 yunai  staff       704 Dec 14 20:30 lib # ActiveMQ jar 包\n0 drwxr-xr-x   8 yunai  staff       256 Aug 28 15:47 webapps # ActiveMQ 管理后台\n0 drwxr-xr-x   3 yunai  staff        96 Dec 14 20:30 webapps-demo\n")])])]),t("h2",{attrs:{id:"_2-2-启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-启动"}},[e._v("#")]),e._v(" 2.2 启动")]),e._v(" "),t("p",[e._v("启动一个 ActiveMQ Broker 服务。命令行操作如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("切换到bin目录\n$ cd /opt/activemq/bin\nls\n")])])]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/image-20231213182100928.png",alt:""}})]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 启动 ActiveMQ Broker 服务。\n./activemq start\n")])])]),t("p",[e._v("访问：http://192.168.104.128:8161/admin/ 账号：admin 密码：admin")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/lichengcan/images/main/image-20231213182230234.png",alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("8161 端口：Web Console 。后续，胖友可以看看"),t("a",{attrs:{href:"https://www.iocoder.cn/ActiveMQ/install/#",target:"_blank",rel:"noopener noreferrer"}},[e._v("「4. ActiveMQ Web Console」"),t("OutboundLink")],1),e._v(" 。")]),e._v(" "),t("li",[e._v("61616 端口：Broker 服务。后端，胖友可以看看"),t("a",{attrs:{href:"https://www.iocoder.cn/ActiveMQ/install/#",target:"_blank",rel:"noopener noreferrer"}},[e._v("「5. 简单示例」"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("p",[e._v("😈 至此，我们已经完成了 ActiveMQ 单机部署。")]),e._v(" "),t("h1",{attrs:{id:"_5-简单示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-简单示例"}},[e._v("#")]),e._v(" 5. 简单示例")]),e._v(" "),t("blockquote",[t("p",[e._v("示例代码对应仓库："),t("a",{attrs:{href:"https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-32/lab-32-activemq-native",target:"_blank",rel:"noopener noreferrer"}},[e._v("lab-32-activemq-native"),t("OutboundLink")],1),e._v(" 。")])]),e._v(" "),t("p",[e._v("在 JMS 规范中，定义了两种消息模型：")]),e._v(" "),t("ul",[t("li",[e._v("点对点（point to point）：基于 Queue 队列的方式。")]),e._v(" "),t("li",[e._v("发布/订阅（publish/subscribe）：基于 Topic 主题的方式。")])]),e._v(" "),t("p",[e._v("具体的概念，胖友可以看看"),t("a",{attrs:{href:"http://www.iocoder.cn/Fight/There-are-two-modes-of-message-queuing-point-to-point-and-publish-subscription/?self",target:"_blank",rel:"noopener noreferrer"}},[e._v("《消息队列两种模式：点对点与发布订阅》"),t("OutboundLink")],1),e._v("文章。")]),e._v(" "),t("p",[e._v("本小节，我们将使用点对点的消息模式，一起来看看在 Java 中，如何使用生产者 Producer 发送消息，和消费者 Consumer 消费消息。")]),e._v(" "),t("p",[e._v("另外，ActiveMQ 的 Java 客户端是遵守 JMS 规范来实现的，所以在稍后的示例中，我们也能看到这一点。")]),e._v(" "),t("h2",{attrs:{id:"_5-1-引入依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-引入依赖"}},[e._v("#")]),e._v(" 5.1 引入依赖")]),e._v(" "),t("p",[e._v("在 "),t("a",{attrs:{href:"https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-32/lab-32-activemq-native/pom.xml",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("pom.xml")]),t("OutboundLink")],1),e._v(" 文件中，引入相关依赖。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <parent>\n        <artifactId>lab-32</artifactId>\n        <groupId>cn.iocoder.springboot.labs</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>lab-32-activemq-native</artifactId>\n\n    <dependencies>\n        \x3c!-- 引入 ActiveMQ 客户端依赖 --\x3e\n        <dependency>\n            <groupId>org.apache.activemq</groupId>\n            <artifactId>activemq-client</artifactId>\n            <version>5.15.10</version>\n        </dependency>\n    </dependencies>\n\n</project>\n')])])]),t("p",[e._v("具体每个依赖的作用，胖友自己认真看下艿艿添加的所有注释噢。")]),e._v(" "),t("h2",{attrs:{id:"_5-2-activemqproducer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-activemqproducer"}},[e._v("#")]),e._v(" 5.2 ActiveMQProducer")]),e._v(" "),t("p",[e._v("创建 "),t("a",{attrs:{href:"https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-32/lab-32-activemq-native/src/main/java/cn/iocoder/springboot/lab32/activemqdemo/ActiveMQProducer.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQProducer"),t("OutboundLink")],1),e._v(" 类，使用 JMS "),t("a",{attrs:{href:"https://github.com/javaee/javax.jms/blob/master/src/main/java/javax/jms/MessageProducer.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("MessageProducer"),t("OutboundLink")],1),e._v(" 发送消息。代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// ActiveMQProducer.java\n\nimport org.apache.activemq.ActiveMQConnectionFactory; // 使用 ActiveMQ 的客户端实现\n\nimport javax.jms.*; // 使用 JMS API\n\npublic class ActiveMQProducer {\n\n    private static final String BROKER_URL = "tcp://127.0.0.1:61616";\n    private static final String USERNAME = "admin";\n    private static final String PASSWORD = "admin";\n\n    private static final String QUEUE_NAME = "queue_demo"; // 只有 QUEUE_NAME 需要共享给 RabbitMQConsumer\n\n    public static void main(String[] args) throws JMSException {\n        // 创建连接\n        Connection connection = getConnection();\n\n        // 创建会话\n        Session session = getSession(connection);\n\n        // 创建队列\n        Queue queue = getQueue(session);\n\n        // 创建 Producer\n        MessageProducer producer = session.createProducer(queue);\n\n        // 发送 3 条消息\n        for (int i = 0; i < 3; i++) {\n            Message message = session.createTextMessage("Hello World" + i);\n            producer.send(message);\n        }\n\n        // 关闭\n        session.close();\n        connection.close();\n    }\n\n    public static Connection getConnection() throws JMSException {\n        // 创建连接\n        ConnectionFactory factory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKER_URL);\n        Connection connection = factory.createConnection();\n        // 启动连接\n        connection.start();\n        return connection;\n    }\n\n    public static Session getSession(Connection connection) throws JMSException {\n        // 第一个方法参数 transacted ，是否开启事务。这里设置为 false ，无需开启\n        // 第二个方法参数 acknowledgeMode ，确认模式。这里设置为 AUTO_ACKNOWLEDGE ，自动确认。推荐阅读 https://my.oschina.net/thinwonton/blog/995291\n        return connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    }\n\n    public static Queue getQueue(Session session) throws JMSException {\n        return session.createQueue(QUEUE_NAME);\n    }\n\n}\n')])])]),t("ul",[t("li",[e._v("代码比较简单，胖友根据艿艿添加的注释，理解下哈。")])]),e._v(" "),t("p",[e._v("执行 "),t("code",[e._v("#main(args)")]),e._v(" 方法，发送 3 条消息到 ActiveMQ 。如果没有报错，说明执行正常成功。")]),e._v(" "),t("h2",{attrs:{id:"_5-3-activemqconsumer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-activemqconsumer"}},[e._v("#")]),e._v(" 5.3 ActiveMQConsumer")]),e._v(" "),t("p",[e._v("创建 "),t("a",{attrs:{href:"https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-32/lab-32-activemq-native/src/main/java/cn/iocoder/springboot/lab32/activemqdemo/ActiveMQConsumer.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("ActiveMQConsumer"),t("OutboundLink")],1),e._v(" 类，使用 JMS "),t("a",{attrs:{href:"https://github.com/javaee/javax.jms/blob/master/src/main/java/javax/jms/MessageConsumer.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("MessageConsumer"),t("OutboundLink")],1),e._v(" 消费消息。代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// ActiveMQConsumer.java\n\nimport javax.jms.*; // 使用 JMS API\n\nimport java.util.concurrent.TimeUnit;\n\npublic class ActiveMQConsumer {\n\n    public static void main(String[] args) throws JMSException {\n        // 创建连接\n        Connection connection = ActiveMQProducer.getConnection();\n\n        // 创建会话\n        final Session session = ActiveMQProducer.getSession(connection);\n\n        // 创建队列\n        Queue queue = ActiveMQProducer.getQueue(session);\n\n        // 创建 Consumer\n        MessageConsumer consumer = session.createConsumer(queue);\n        consumer.setMessageListener(new MessageListener() {\n\n            public void onMessage(Message message) {\n                TextMessage textMessage = (TextMessage) message;\n                try {\n                    System.out.println(String.format("[线程：%s][消息编号：%s][消息内容：%s]",\n                            Thread.currentThread(), textMessage.getJMSMessageID(), textMessage.getText()));\n                } catch (JMSException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n        });\n\n        // 关闭\n        try {\n            TimeUnit.HOURS.sleep(1);\n        } catch (InterruptedException ignore) {\n        }\n        session.close();\n        connection.close();\n    }\n\n}\n')])])]),t("ul",[t("li",[e._v("代码比较简单，胖友根据艿艿添加的注释，理解下哈。")])]),e._v(" "),t("p",[e._v("执行 "),t("code",[e._v("#main(args)")]),e._v(" 方法，从 RabbitMQ 消费消息。执行结果如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[线程：Thread[ActiveMQ Session Task-1,7,main]][消息编号：ID:MacBook-Pro-8-53110-1576335483269-1:1:1:1:1][消息内容：Hello World0]\n[线程：Thread[ActiveMQ Session Task-1,7,main]][消息编号：ID:MacBook-Pro-8-53110-1576335483269-1:1:1:1:2][消息内容：Hello World1]\n[线程：Thread[ActiveMQ Session Task-1,7,main]][消息编号：ID:MacBook-Pro-8-53110-1576335483269-1:1:1:1:3][消息内容：Hello World2]\n")])])]),t("ul",[t("li",[e._v("消费成功，符合预期。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);