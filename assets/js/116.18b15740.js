(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{532:function(a,e,t){"use strict";t.r(e);var r=t(2),s=Object(r.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker搭建java后端服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker搭建java后端服务"}},[a._v("#")]),a._v(" Docker搭建Java后端服务")]),a._v(" "),e("h2",{attrs:{id:"_1-docker安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker安装"}},[a._v("#")]),a._v(" 1.docker安装")]),a._v(" "),e("h3",{attrs:{id:"_1-1-查看docker是否安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-查看docker是否安装"}},[a._v("#")]),a._v(" 1.1 查看docker是否安装")]),a._v(" "),e("p",[a._v("查看docker版本")]),a._v(" "),e("p",[a._v("docker -v")]),a._v(" "),e("h3",{attrs:{id:"_1-2-安装docker时yum包管理出现问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-安装docker时yum包管理出现问题"}},[a._v("#")]),a._v(" 1.2 安装docker时yum包管理出现问题")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/cheng_jeff/article/details/123642069",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/cheng_jeff/article/details/123642069"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"_1-2-卸载docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-卸载docker"}},[a._v("#")]),a._v(" 1.2 卸载docker")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n")])])]),e("blockquote",[e("p",[a._v("Docker 镜像、容器、数据卷和网络数据都保存在 "),e("code",[a._v("/var/lib/docker/")]),a._v("。新的 Docker 引擎包现在为 "),e("code",[a._v("Docker-ce")]),a._v("。")])]),a._v(" "),e("h4",{attrs:{id:"_1-3-安装docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-安装docker"}},[a._v("#")]),a._v(" 1.3 安装docker")]),a._v(" "),e("blockquote",[e("p",[a._v("警告：切勿在没有配置 Docker YUM 源的情况下直接使用 yum 命令安装 Docker.")]),a._v(" "),e("p",[a._v("配置阿里云docker yum源")])]),a._v(" "),e("h5",{attrs:{id:"set-up-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set-up-repository"}},[a._v("#")]),a._v(" Set up repository")]),a._v(" "),e("blockquote",[e("p",[a._v("sudo yum install -y yum-utils device-mapper-persistent-data lvm2")])]),a._v(" "),e("h5",{attrs:{id:"use-aliyun-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-aliyun-docker"}},[a._v("#")]),a._v(" Use Aliyun Docker")]),a._v(" "),e("blockquote",[e("p",[a._v("sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1.yum-util 提供yum-config-manager功能\n\nsudo yum install -y yum-utils\n2.设置yum源\n\nsudo yum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \nsudo sed -i 's/download.docker.com/mirrors.aliyun.com\\/docker-ce/g' /etc/yum.repos.d/docker-ce.repo\n\n3.测试docker\nsudo yum-config-manager --enable docker-ce-test\n\n4.安装docker\nsudo yum install docker-ce docker-ce-cli containerd.io\n")])])]),e("h2",{attrs:{id:"_2-docker启动、停止"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker启动、停止"}},[a._v("#")]),a._v(" 2.docker启动、停止")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 启动docker服务： \nsystemctl start docker \n# 停止docker服务： \nsystemctl stop docker \n# 重启docker服务： \nsystemctl restart docker \n# 查看docker服务状态： \nsystemctl status docker \n# 设置开机启动docker服务： \nsystemctl enable docker\n")])])]),e("h2",{attrs:{id:"_3-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-镜像"}},[a._v("#")]),a._v(" 3.镜像")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" #查看镜像可以使用如下命令： \n docker images\n#如果你需要从网络中查找需要的镜像，可以通过以下命令搜索：\n docker search 镜像名称\n")])])]),e("h2",{attrs:{id:"_4-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-容器"}},[a._v("#")]),a._v(" 4.容器")]),a._v(" "),e("h5",{attrs:{id:"_4-1-查看容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-查看容器"}},[a._v("#")]),a._v(" 4.1 查看容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("查看正在运行的容器使用命令：docker ps\n查看所有容器使用命令：docker ps -a\n参数说明：\n-i：表示运行容器\n-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。\n–name :为创建的容器命名。\n#可以按照镜像id删除镜像，命令如下： docker rmi 镜像id 12\n-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件\n映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。\n-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。\n-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射\n")])])]),e("h5",{attrs:{id:"_4-2-查看容器ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-查看容器ip"}},[a._v("#")]),a._v(" 4.2 查看容器ip")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 在linux宿主机下查看 mycentos3 的ip \ndocker inspect mycentos3\n\n")])])]),e("h5",{attrs:{id:"_4-3-启动与停止容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-启动与停止容器"}},[a._v("#")]),a._v(" 4.3 启动与停止容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" 停止正在运行的容器：\ndocker stop 容器名称或者ID docker stop mycentos2 \n\n#启动已运行过的容器：\ndocker start 容器名称或者ID docker start mycentos2\n\n")])])]),e("h5",{attrs:{id:"_4-4-删除容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-删除容器"}},[a._v("#")]),a._v(" 4.4 删除容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#删除容器 \ndocker rm mycentos7\n")])])]),e("h2",{attrs:{id:"_5-docker-部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-docker-部署"}},[a._v("#")]),a._v(" 5 Docker 部署")]),a._v(" "),e("blockquote",[e("p",[a._v("镜像加速")]),a._v(" "),e("p",[a._v("https://yeasy.gitbook.io/docker_practice/install/mirror")])]),a._v(" "),e("h5",{attrs:{id:"_5-1获取java镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1获取java镜像"}},[a._v("#")]),a._v(" 5.1"),e("strong",[a._v("获取java镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("#如果没有指定对应的版本，默认会获取版本为latest的镜像\ndocker pull java\n")])])]),e("h5",{attrs:{id:"_5-2确认镜像下载成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2确认镜像下载成功"}},[a._v("#")]),a._v(" 5.2确认镜像下载成功")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker images\n")])])]),e("h5",{attrs:{id:"_5-3执行启动java容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3执行启动java容器"}},[a._v("#")]),a._v(" 5.3执行启动Java容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("其中，–name后面的“java”是为容器指定了一个别名，而最后的那个“java”指的是下载镜像时的名称。\ndocker run -d -it --name java java\n命令以及参数的含义：\n\nrun：启动一个镜像容器\n\n-d：指定容器运行于后台\n\n-it：-i 和 -t 的缩写；\n\n-i：以交互模式运行容器，通常与 -t 同时使用\n\n-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用\n\n–name：指定容器名字，后续可以通过名字进行容器管理\n")])])]),e("h2",{attrs:{id:"_6-查看docker中的镜像运行情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-查看docker中的镜像运行情况"}},[a._v("#")]),a._v(" 6 查看Docker中的镜像运行情况")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("查询docker里已经运行的镜像\ndocker ps  \n\n查看docker 里所有镜像 （包括没有启动的镜像）\ndocker ps -a   \n\n")])])]),e("h2",{attrs:{id:"_7查看jdk版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7查看jdk版本"}},[a._v("#")]),a._v(" 7查看JDK版本")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("需要通过Java容器id进入容器里面\n\ndocker ps 获取Java容器id（docker attach id）\n\njava -version\n")])])]),e("h5",{attrs:{id:"_7-1-退出容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-退出容器"}},[a._v("#")]),a._v(" 7.1 退出容器")]),a._v(" "),e("ul",[e("li",[a._v("如果是通过 attach 进入的容器，在退出容器的时候，如果不想让容器停止运行的话，就不能使用exit命令或者Ctrl+D快捷键的形式退出，而是使用 Ctrl + P + Q 组合键退出容器")]),a._v(" "),e("li",[a._v("如果是通过 exec 命令进入的容器，在退出容器的时候，就可以使用exit或者Ctrl+D快捷键退出容器，同时容器不会停止运行，这也是exec与attach的最大区别。当然，你也可以使用Ctrl + P + Q 组合键退出容器，容器一样不会停止运行。（docker exec -it ccjava /bin/bash）")])]),a._v(" "),e("h2",{attrs:{id:"_8-安装redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-安装redis"}},[a._v("#")]),a._v(" 8.安装redis")]),a._v(" "),e("h5",{attrs:{id:"_8-1-拉取redis镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-拉取redis镜像"}},[a._v("#")]),a._v(" 8.1 拉取redis镜像")]),a._v(" "),e("p",[a._v("docker pull redis")]),a._v(" "),e("h5",{attrs:{id:"_8-2创建容器与操作容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2创建容器与操作容器"}},[a._v("#")]),a._v(" 8.2创建容器与操作容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 创建redis容器 \ndocker run -di --name=myredis -p 6379:6379 redis\n\n#进入redis容器 \ndocker exec -it myredis /bin/bash\n\n#进入redis安装目录 \ncd /usr/local/bin\n \n#连接redis \n./redis-cli\n")])])]),e("h2",{attrs:{id:"_9安装mysql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9安装mysql"}},[a._v("#")]),a._v(" 9安装MySQL")]),a._v(" "),e("h5",{attrs:{id:"_9-1拉取镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1拉取镜像"}},[a._v("#")]),a._v(" 9.1拉取镜像")]),a._v(" "),e("p",[a._v("拉取MySQL最新镜像")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull mysql:latest\n")])])]),e("h5",{attrs:{id:"_9-2-创建容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-创建容器"}},[a._v("#")]),a._v(" 9.2 "),e("strong",[a._v("创建容器")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 创建mysql容器 \n$ docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql\n")])])]),e("ul",[e("li",[a._v("-p 代表端口映射，格式为 宿主机映射端口:容器运行端口")]),a._v(" "),e("li",[a._v("-e 代表添加环境变量 MYSQL_ROOT_PASSWORD 是root用户的远程登陆密码（如果是在容器中使用root登录的话，那么其密码为空）")])]),a._v(" "),e("h5",{attrs:{id:"_9-3-操作mysql容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-操作mysql容器"}},[a._v("#")]),a._v(" 9.3 操作MySQL容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 进入MySQL容器 \ndocker exec -it mysql-test /bin/bash\n \n# 登录容器里面的mysql \nmysql -u root -p\n")])])]),e("h2",{attrs:{id:"_10-docker镜像推送-push-到docker-hub-最详细版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-docker镜像推送-push-到docker-hub-最详细版"}},[a._v("#")]),a._v(" 10 Docker镜像推送（push）到Docker Hub（最详细版）")]),a._v(" "),e("p",[a._v("https://blog.csdn.net/lxy___/article/details/105821141")]),a._v(" "),e("h2",{attrs:{id:"_11-简单的dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-简单的dockerfile"}},[a._v("#")]),a._v(" 11 简单的dockerfile")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('# 使用官方的Java 11镜像作为基础镜像\nFROM openjdk:8-jdk-slim\n\n# 设置工作目录\nWORKDIR /app\n\n# 将本地构建好的应用程序文件复制到镜像中\nCOPY target/docker-test-0.0.1-SNAPSHOT.jar /app/\n\n# 暴露应用程序运行的端口\nEXPOSE 8080\n\n# 启动容器时执行的命令\nCMD ["java", "-jar", "/app/docker-test-0.0.1-SNAPSHOT.jar"]\n\n#docker build -t docker-test .\n#这将会在当前目录中构建一个名为 my-spring-boot-app 的Docker镜像。然后，可以使用以下命令来运行该镜像：\n\n')])])]),e("h2",{attrs:{id:"_12-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-构建镜像"}},[a._v("#")]),a._v(" 12 构建镜像")]),a._v(" "),e("p",[a._v("这将会在当前目录中构建一个名为 "),e("code",[a._v("my-spring-boot-app")]),a._v(" 的Docker镜像。然后，可以使用以下命令来运行该镜像：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t my-spring-boot-app .\n")])])]),e("h2",{attrs:{id:"_13-启动容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-启动容器"}},[a._v("#")]),a._v(" 13 启动容器")]),a._v(" "),e("p",[a._v("这将会在容器中启动Spring Boot应用程序，并将容器的端口 8080 映射到主机的端口 8080，使得应用程序可以在本地通过浏览器访问。请注意，在运行Docker容器时，需要将应用程序的端口映射到主机的端口，否则无法在本地访问应用程序。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -p 8080:8080 my-spring-boot-app\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);